{
    "sourceFile": "main.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1745719720693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745720455242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,8 +168,9 @@\n         order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n         # lock_trading(context, symbol)\r\n+        \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n         if dif[-1] < 0:  \r\n             print(f\"====触发第2层卖出信号====，减持20%\" )\r\n"
                },
                {
                    "date": 1745720491003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n         order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n         # lock_trading(context, symbol)\r\n-        \r\n+\r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n         if dif[-1] < 0:  \r\n             print(f\"====触发第2层卖出信号====，减持20%\" )\r\n@@ -188,10 +188,10 @@\n             order_target_percent(percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             # lock_trading(context, symbol)\r\n-            # 清仓标记\r\n-            # context.first[symbol] = 0\r\n+            清仓标记\r\n+            context.first[symbol] = 0\r\n \r\n def on_order_status(context, order):\r\n     # 标的代码\r\n     symbol = order['symbol']\r\n"
                },
                {
                    "date": 1745720496065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n         order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n         # lock_trading(context, symbol)\r\n-\r\n+        \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n         if dif[-1] < 0:  \r\n             print(f\"====触发第2层卖出信号====，减持20%\" )\r\n@@ -188,10 +188,10 @@\n             order_target_percent(percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             # lock_trading(context, symbol)\r\n-            清仓标记\r\n-            context.first[symbol] = 0\r\n+            # 清仓标记\r\n+            # context.first[symbol] = 0\r\n \r\n def on_order_status(context, order):\r\n     # 标的代码\r\n     symbol = order['symbol']\r\n"
                },
                {
                    "date": 1745720557955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n-        # lock_trading(context, symbol)\r\n+        lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n         if dif[-1] < 0:  \r\n@@ -189,9 +189,9 @@\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             # lock_trading(context, symbol)\r\n             # 清仓标记\r\n-            # context.first[symbol] = 0\r\n+            context.first[symbol] = 0\r\n \r\n def on_order_status(context, order):\r\n     # 标的代码\r\n     symbol = order['symbol']\r\n"
                },
                {
                    "date": 1745720609582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n-        lock_trading(context, symbol)\r\n+        # lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n         if dif[-1] < 0:  \r\n"
                },
                {
                    "date": 1745720633821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n             order_target_percent(percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n-            # lock_trading(context, symbol)\r\n+            lock_trading(context, symbol)\r\n             # 清仓标记\r\n             context.first[symbol] = 0\r\n \r\n def on_order_status(context, order):\r\n"
                },
                {
                    "date": 1745720653044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,12 +115,12 @@\n         return\r\n \r\n \r\n     # # 在交易信号触发前增加锁状态检查\r\n-    # if context.trading_blocked[symbol]['status'] and \\\r\n-    #     context.trading_blocked[symbol]['expire_time'] < context.now:\r\n-    #     print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n-    #     return\r\n+    if context.trading_blocked[symbol]['status'] and \\\r\n+        context.trading_blocked[symbol]['expire_time'] < context.now:\r\n+        print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n+        return\r\n \r\n \r\n     # 日内交易\r\n     # 本次（单次）可交易总资金\r\n"
                },
                {
                    "date": 1745720712699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n             print(f\"====触发第2层卖出信号====，减持20%\" )\r\n             order_target_percent(symbol=symbol,percent=0.5,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  # 减持30%\r\n-            # lock_trading(context, symbol)\r\n+            lock_trading(context, symbol)\r\n             \r\n         # 第三层：周线级别确认\r\n         # 获取近一周收盘价（网页9周线处理逻辑）\r\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n"
                },
                {
                    "date": 1745720793675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n-        # lock_trading(context, symbol)\r\n+        lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n         if dif[-1] < 0:  \r\n"
                },
                {
                    "date": 1745720838104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,11 +96,11 @@\n \r\n     # 初始建仓(择时建仓)\r\n     if context.first[symbol] == 0 and current_price>0 :\r\n         # 重置交易锁\r\n-        # if context.trading_blocked[symbol]['status']:\r\n-        #     unlock_trading(context, symbol)\r\n-        #     print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n+        if context.trading_blocked[symbol]['status']:\r\n+            unlock_trading(context, symbol)\r\n+            print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n \r\n         if not check_timing_buy_signal(context, symbol):\r\n             print(f\"{context.now} {symbol} 择时条件未满足，跳过建仓\")\r\n             return\r\n"
                },
                {
                    "date": 1745722535458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -181,9 +181,9 @@\n             \r\n         # 第三层：周线级别确认\r\n         # 获取近一周收盘价（网页9周线处理逻辑）\r\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n-        daily_ma20 = np.mean(context.daily_close[-20:])\r\n+        daily_ma20 = np.mean(daily_data_close[-20:])\r\n         if weekly_close < daily_ma20:\r\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n             order_target_percent(percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n"
                },
                {
                    "date": 1745722557683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n         daily_ma20 = np.mean(daily_data_close[-20:])\r\n         if weekly_close < daily_ma20:\r\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n-            order_target_percent(percent=0.0,\r\n+            order_target_percent(symbol=symbolpercent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n"
                },
                {
                    "date": 1745722816073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n \r\n def init(context):\r\n     # 设置标的股票\r\n-    context.all_symbols = ['SHSE.600000','SHSE.688165']\r\n+    context.all_symbols = ['SHSE.600000','SHSE.300100']\r\n     # 用于判定第一个仓位是否成功开仓\r\n     context.first = {symbol:0 for symbol in context.all_symbols}\r\n      # 新增交易状态锁\r\n     context.trading_blocked = {\r\n@@ -184,9 +184,9 @@\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n         daily_ma20 = np.mean(daily_data_close[-20:])\r\n         if weekly_close < daily_ma20:\r\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n-            order_target_percent(symbol=symbolpercent=0.0,\r\n+            order_target_percent(symbol=symbol,percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n"
                },
                {
                    "date": 1745722864240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n \r\n def init(context):\r\n     # 设置标的股票\r\n-    context.all_symbols = ['SHSE.600000','SHSE.300100']\r\n+    context.all_symbols = ['SHSE.600000','SZSE.300100']\r\n     # 用于判定第一个仓位是否成功开仓\r\n     context.first = {symbol:0 for symbol in context.all_symbols}\r\n      # 新增交易状态锁\r\n     context.trading_blocked = {\r\n"
                },
                {
                    "date": 1745723264782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,9 +241,9 @@\n     backtest_commission_ratio回测佣金比例\r\n     backtest_slippage_ratio回测滑点比例\r\n     backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n     '''\r\n-    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=180))[:19]\r\n+    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=170))[:19]\r\n     backtest_end_time = str(datetime.datetime.now())[:19]\r\n     run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n         filename='main.py',\r\n         mode=MODE_BACKTEST,\r\n"
                },
                {
                    "date": 1745723278127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,9 +241,9 @@\n     backtest_commission_ratio回测佣金比例\r\n     backtest_slippage_ratio回测滑点比例\r\n     backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n     '''\r\n-    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=170))[:19]\r\n+    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=160))[:19]\r\n     backtest_end_time = str(datetime.datetime.now())[:19]\r\n     run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n         filename='main.py',\r\n         mode=MODE_BACKTEST,\r\n"
                },
                {
                    "date": 1745723285753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+# coding=utf-8\r\n+from __future__ import print_function, absolute_import, unicode_literals\r\n+from gm.api import *\r\n+import math\r\n+import datetime\r\n+\r\n+from QTUtils import *\r\n+\r\n+\r\n+'''\r\n+示例策略仅供参考，不建议直接实盘使用。\r\n+\r\n+日内回转交易是指投资者就同一个标的（如股票）在同一个交易日内各完成多次买进和卖出的行为\r\n+其目的为维持股票数量不变，降低股票成本\r\n+本策略以1分钟MACD为基础，金叉时买入，死叉时卖出，尾盘回转至初始仓位\r\n+'''\r\n+\r\n+\r\n+def init(context):\r\n+    # 设置标的股票\r\n+    context.all_symbols = ['SHSE.600000','SZSE.300100']\r\n+    # 用于判定第一个仓位是否成功开仓\r\n+    context.first = {symbol:0 for symbol in context.all_symbols}\r\n+     # 新增交易状态锁\r\n+    context.trading_blocked = {\r\n+        symbol: {\r\n+            'status': False,          # 交易锁状态\r\n+            'expire_time': None       # 过期时间\r\n+        } for symbol in context.all_symbols\r\n+    }\r\n+\r\n+    # 需要保持的总仓位\r\n+    # context.total = 50000\r\n+    # 日内回转每次交易数量\r\n+    # context.trade_n = 25000\r\n+    # 初始资金比例（总仓位比例）\r\n+    context.total_cash_ratio = 0.25  # 总仓位占账户资金的50%\r\n+    # 每次交易资金比例（日内回转比例）\r\n+    context.trade_cash_ratio = 0.1  # 每次交易账户可用资金的10%\r\n+    # MACD日内分时使用的频率，60s为1分钟bar，300s为5分钟bar\r\n+    context.frequency = '300s'\r\n+    # MACD日内分时回溯数据长度（计算MACD)\r\n+    context.periods_time = 1000\r\n+\r\n+    # 在init中增加择时参数\r\n+    context.risk_ratio = 0.02  # 单笔风险敞口2%\r\n+    context.atr_period = 14    # ATR计算周期\r\n+    context.trend_period = 10   # 趋势判定周期\r\n+    context.volume_ratio = 1.2  # 量能突破阈值\r\n+\r\n+    # 初始化ATR值存储到上下文\r\n+    context.atr_value = None\r\n+\r\n+    # 在策略初始化中设置\r\n+    context.sell_params = {\r\n+    'atr_multiplier': 2.2,      # AR波动过滤系数\r\n+    'resistance_buffer': 0.985, # 压力位检测缓冲\r\n+    'volume_threshold': 2.3     # 放量下跌阈值\r\n+    }\r\n+\r\n+    \r\n+    # 订阅数据日内分时数据\r\n+    subscribe(symbols=context.all_symbols,\r\n+              frequency=context.frequency,\r\n+              count=context.periods_time,\r\n+              fields='symbol,eob,close')\r\n+    # 订阅标的的日线数据，窗口长度设为55（14周期ATR+1）\r\n+    subscribe(symbols=context.all_symbols,\r\n+              frequency='1d',\r\n+              count=55)\r\n+\r\n+    # # 新增10:01定时卖出任务\r\n+    # schedule(schedule_func=daily_sell, \r\n+    #         date_rule='1d', \r\n+    #         time_rule='10:00:00')  # 网页8同花顺定时策略参考\r\n+\r\n+    schedule(schedule_func=algo, date_rule='1d', time_rule='14:55:00')\r\n+\r\n+\r\n+\r\n+# 订阅行情\r\n+def on_bar(context, bars):\r\n+    # 获取账户数据\r\n+    account = context.account()\r\n+    bar = bars[0]\r\n+    symbol = bar['symbol']\r\n+    # 获取当前价格\r\n+    current_price = bar['close']\r\n+    # 获取账户总资金\r\n+    total_cash = account.cash['nav']\r\n+    # 获取账户可用资金\r\n+    available_cash = account.cash['available']\r\n+    # 当日可交易总资金\r\n+    target_value = available_cash * context.total_cash_ratio \r\n+\r\n+\r\n+    # 初始建仓(择时建仓)\r\n+    if context.first[symbol] == 0 and current_price>0 :\r\n+        # 重置交易锁\r\n+        if context.trading_blocked[symbol]['status']:\r\n+            unlock_trading(context, symbol)\r\n+            print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n+\r\n+        if not check_timing_buy_signal(context, symbol):\r\n+            print(f\"{context.now} {symbol} 择时条件未满足，跳过建仓\")\r\n+            return\r\n+        # 表示持仓该股票\r\n+        context.first[symbol] = 1\r\n+        order_value(symbol=symbol, \r\n+                   value=target_value,\r\n+                   side=OrderSide_Buy,\r\n+                   order_type=OrderType_Market,\r\n+                   position_effect=PositionEffect_Open)\r\n+        print(f'{context.now}：{symbol}建底仓，投入资金={target_value:.2f}')\r\n+        return\r\n+\r\n+\r\n+    # # 在交易信号触发前增加锁状态检查\r\n+    if context.trading_blocked[symbol]['status'] and \\\r\n+        context.trading_blocked[symbol]['expire_time'] < context.now:\r\n+        print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n+        return\r\n+\r\n+\r\n+    # 日内交易\r\n+    # 本次（单次）可交易总资金\r\n+    trade_value = available_cash * context.trade_cash_ratio\r\n+    trade_volume = int(trade_value / current_price) if current_price > 0 else 0\r\n+    \r\n+\r\n+    # 修改on_bar中的交易量计算（新增动态交易量）\r\n+    trade_value = min(available_cash * context.trade_cash_ratio,\r\n+                    calculate_dynamic_position(context, symbol) * current_price) \r\n+    # print(f\"[本次交易量] 计划交易量={available_cash * context.trade_cash_ratio:.2f}元 \\\r\n+    #     | 动态交易量={calculate_dynamic_position(context, symbol) * current_price:.2f}元 \\\r\n+    #     | 实际交易量={trade_value:.2f}\")\r\n+\r\n+    close = context.data(symbol=symbol,\r\n+                        frequency=context.frequency,\r\n+                        count=context.periods_time,\r\n+                        fields='close')['close'].values\r\n+    dif, dea, _ = MACD(close)\r\n+    if dif[-2] <= dea[-2] and dif[-1] > dea[-1] and check_trading_permission(context, symbol):  # 日内金叉\r\n+        if trade_volume >0:\r\n+            order_value(symbol=symbol,\r\n+                       value=trade_value,\r\n+                       side=OrderSide_Buy,\r\n+                       order_type=OrderType_Market,\r\n+                       position_effect=PositionEffect_Open)\r\n+    elif dif[-2] >= dea[-2] and dif[-1] < dea[-1] and check_trading_permission(context, symbol):  # 日内死叉\r\n+        if trade_volume >0:\r\n+            order_value(symbol=symbol,\r\n+                       value=trade_value,\r\n+                       side=OrderSide_Sell,\r\n+                       order_type=OrderType_Market,\r\n+                       position_effect=PositionEffect_Close)\r\n+\r\n+\r\n+\r\n+    # 分层卖出执行（减持）\r\n+    if generate_sell_signal(context, symbol):\r\n+        daily_data_close = context.data(symbol=symbol,\r\n+                                frequency='1d',\r\n+                                count=55,\r\n+                                fields='close')['close'].values\r\n+        # 第一层：触发基础信号\r\n+        print(f\"====触发第1层卖出信号====，减持30%\" )\r\n+        order_target_percent(symbol=symbol, percent=0.7,\r\n+                             position_side=PositionSide_Short,\r\n+                             order_type=OrderType_Market)  # 减持30%\r\n+        lock_trading(context, symbol)\r\n+        \r\n+        # 第二层：MACD零轴下强化\r\n+        dif, dea, _ = MACD(daily_data_close)\r\n+        if dif[-1] < 0:  \r\n+            print(f\"====触发第2层卖出信号====，减持20%\" )\r\n+            order_target_percent(symbol=symbol,percent=0.5,\r\n+                        position_side=PositionSide_Short,\r\n+                        order_type=OrderType_Market)  # 减持30%\r\n+            lock_trading(context, symbol)\r\n+            \r\n+        # 第三层：周线级别确认\r\n+        # 获取近一周收盘价（网页9周线处理逻辑）\r\n+        weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n+        daily_ma20 = np.mean(daily_data_close[-20:])\r\n+        if weekly_close < daily_ma20:\r\n+            print(f\"====触发第3层卖出信号====，清仓\" )\r\n+            order_target_percent(symbol=symbol,percent=0.0,\r\n+                        position_side=PositionSide_Short,\r\n+                        order_type=OrderType_Market)  \r\n+            lock_trading(context, symbol)\r\n+            # 清仓标记\r\n+            context.first[symbol] = 0\r\n+\r\n+def on_order_status(context, order):\r\n+    # 标的代码\r\n+    symbol = order['symbol']\r\n+    # 委托价格\r\n+    price = order['price']\r\n+    # 委托数量\r\n+    volume = order['volume']\r\n+    # 查看下单后的委托状态，等于3代表委托全部成交\r\n+    status = order['status']\r\n+    # 买卖方向，1为买入，2为卖出\r\n+    side = order['side']\r\n+    # 开平仓类型，1为开仓，2为平仓\r\n+    effect = order['position_effect']\r\n+    # 委托类型，1为限价委托，2为市价委托\r\n+    order_type = order['order_type']\r\n+    if status == 3:\r\n+        if effect == 1:\r\n+            if side == 1:\r\n+                side_effect = '开多仓'\r\n+            else:\r\n+                side_effect = '开空仓'\r\n+        else:\r\n+            if side == 1:\r\n+                side_effect = '平空仓'\r\n+            else:\r\n+                side_effect = '平多仓'\r\n+        order_type_word = '限价' if order_type == 1 else '市价'\r\n+        print('{}:标的：{}，操作：以{}{}，委托价格：{}，委托数量：{}'.format(\r\n+            context.now, symbol, order_type_word, side_effect, price, volume))\r\n+\r\n+\r\n+def on_backtest_finished(context, indicator):\r\n+    print('*' * 50)\r\n+    print('回测已完成，请通过右上角“回测历史”功能查询详情。')\r\n+\r\n+\r\n+if __name__ == '__main__':\r\n+    '''\r\n+    strategy_id策略ID,由系统生成\r\n+    filename文件名,请与本文件名保持一致\r\n+    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST\r\n+    token绑定计算机的ID,可在系统设置-密钥管理中生成\r\n+    backtest_start_time回测开始时间\r\n+    backtest_end_time回测结束时间\r\n+    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST\r\n+    backtest_initial_cash回测初始资金\r\n+    backtest_commission_ratio回测佣金比例\r\n+    backtest_slippage_ratio回测滑点比例\r\n+    backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n+    '''\r\n+    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=120))[:19]\r\n+    backtest_end_time = str(datetime.datetime.now())[:19]\r\n+    run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n+        filename='main.py',\r\n+        mode=MODE_BACKTEST,\r\n+        token='a39f0567e24a8c8a3d7f0cef38a71d619be4ee96',\r\n+        backtest_start_time=backtest_start_time,\r\n+        backtest_end_time=backtest_end_time,\r\n+        backtest_adjust=ADJUST_PREV,\r\n+        backtest_initial_cash=1000000,\r\n+        backtest_commission_ratio=0.0001,\r\n+        backtest_slippage_ratio=0.0001,\r\n+        backtest_match_mode=1)\r\n+\r\n"
                },
                {
                    "date": 1745723631140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n \r\n \r\n def init(context):\r\n     # 设置标的股票\r\n-    context.all_symbols = ['SHSE.600000','SZSE.300100']\r\n+    context.all_symbols = ['SHSE.600000','SHSE.688165']\r\n     # 用于判定第一个仓位是否成功开仓\r\n     context.first = {symbol:0 for symbol in context.all_symbols}\r\n      # 新增交易状态锁\r\n     context.trading_blocked = {\r\n@@ -184,9 +184,9 @@\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n         daily_ma20 = np.mean(daily_data_close[-20:])\r\n         if weekly_close < daily_ma20:\r\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n-            order_target_percent(symbol=symbol,percent=0.0,\r\n+            order_target_percent(symbol=symbolpercent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n@@ -241,9 +241,9 @@\n     backtest_commission_ratio回测佣金比例\r\n     backtest_slippage_ratio回测滑点比例\r\n     backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n     '''\r\n-    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=120))[:19]\r\n+    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=180))[:19]\r\n     backtest_end_time = str(datetime.datetime.now())[:19]\r\n     run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n         filename='main.py',\r\n         mode=MODE_BACKTEST,\r\n@@ -255,262 +255,4 @@\n         backtest_commission_ratio=0.0001,\r\n         backtest_slippage_ratio=0.0001,\r\n         backtest_match_mode=1)\r\n \r\n-# coding=utf-8\r\n-from __future__ import print_function, absolute_import, unicode_literals\r\n-from gm.api import *\r\n-import math\r\n-import datetime\r\n-\r\n-from QTUtils import *\r\n-\r\n-\r\n-'''\r\n-示例策略仅供参考，不建议直接实盘使用。\r\n-\r\n-日内回转交易是指投资者就同一个标的（如股票）在同一个交易日内各完成多次买进和卖出的行为\r\n-其目的为维持股票数量不变，降低股票成本\r\n-本策略以1分钟MACD为基础，金叉时买入，死叉时卖出，尾盘回转至初始仓位\r\n-'''\r\n-\r\n-\r\n-def init(context):\r\n-    # 设置标的股票\r\n-    context.all_symbols = ['SHSE.600000','SZSE.300100']\r\n-    # 用于判定第一个仓位是否成功开仓\r\n-    context.first = {symbol:0 for symbol in context.all_symbols}\r\n-     # 新增交易状态锁\r\n-    context.trading_blocked = {\r\n-        symbol: {\r\n-            'status': False,          # 交易锁状态\r\n-            'expire_time': None       # 过期时间\r\n-        } for symbol in context.all_symbols\r\n-    }\r\n-\r\n-    # 需要保持的总仓位\r\n-    # context.total = 50000\r\n-    # 日内回转每次交易数量\r\n-    # context.trade_n = 25000\r\n-    # 初始资金比例（总仓位比例）\r\n-    context.total_cash_ratio = 0.25  # 总仓位占账户资金的50%\r\n-    # 每次交易资金比例（日内回转比例）\r\n-    context.trade_cash_ratio = 0.1  # 每次交易账户可用资金的10%\r\n-    # MACD日内分时使用的频率，60s为1分钟bar，300s为5分钟bar\r\n-    context.frequency = '300s'\r\n-    # MACD日内分时回溯数据长度（计算MACD)\r\n-    context.periods_time = 1000\r\n-\r\n-    # 在init中增加择时参数\r\n-    context.risk_ratio = 0.02  # 单笔风险敞口2%\r\n-    context.atr_period = 14    # ATR计算周期\r\n-    context.trend_period = 10   # 趋势判定周期\r\n-    context.volume_ratio = 1.2  # 量能突破阈值\r\n-\r\n-    # 初始化ATR值存储到上下文\r\n-    context.atr_value = None\r\n-\r\n-    # 在策略初始化中设置\r\n-    context.sell_params = {\r\n-    'atr_multiplier': 2.2,      # AR波动过滤系数\r\n-    'resistance_buffer': 0.985, # 压力位检测缓冲\r\n-    'volume_threshold': 2.3     # 放量下跌阈值\r\n-    }\r\n-\r\n-    \r\n-    # 订阅数据日内分时数据\r\n-    subscribe(symbols=context.all_symbols,\r\n-              frequency=context.frequency,\r\n-              count=context.periods_time,\r\n-              fields='symbol,eob,close')\r\n-    # 订阅标的的日线数据，窗口长度设为55（14周期ATR+1）\r\n-    subscribe(symbols=context.all_symbols,\r\n-              frequency='1d',\r\n-              count=55)\r\n-\r\n-    # # 新增10:01定时卖出任务\r\n-    # schedule(schedule_func=daily_sell, \r\n-    #         date_rule='1d', \r\n-    #         time_rule='10:00:00')  # 网页8同花顺定时策略参考\r\n-\r\n-    schedule(schedule_func=algo, date_rule='1d', time_rule='14:55:00')\r\n-\r\n-\r\n-\r\n-# 订阅行情\r\n-def on_bar(context, bars):\r\n-    # 获取账户数据\r\n-    account = context.account()\r\n-    bar = bars[0]\r\n-    symbol = bar['symbol']\r\n-    # 获取当前价格\r\n-    current_price = bar['close']\r\n-    # 获取账户总资金\r\n-    total_cash = account.cash['nav']\r\n-    # 获取账户可用资金\r\n-    available_cash = account.cash['available']\r\n-    # 当日可交易总资金\r\n-    target_value = available_cash * context.total_cash_ratio \r\n-\r\n-\r\n-    # 初始建仓(择时建仓)\r\n-    if context.first[symbol] == 0 and current_price>0 :\r\n-        # 重置交易锁\r\n-        if context.trading_blocked[symbol]['status']:\r\n-            unlock_trading(context, symbol)\r\n-            print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n-\r\n-        if not check_timing_buy_signal(context, symbol):\r\n-            print(f\"{context.now} {symbol} 择时条件未满足，跳过建仓\")\r\n-            return\r\n-        # 表示持仓该股票\r\n-        context.first[symbol] = 1\r\n-        order_value(symbol=symbol, \r\n-                   value=target_value,\r\n-                   side=OrderSide_Buy,\r\n-                   order_type=OrderType_Market,\r\n-                   position_effect=PositionEffect_Open)\r\n-        print(f'{context.now}：{symbol}建底仓，投入资金={target_value:.2f}')\r\n-        return\r\n-\r\n-\r\n-    # # 在交易信号触发前增加锁状态检查\r\n-    if context.trading_blocked[symbol]['status'] and \\\r\n-        context.trading_blocked[symbol]['expire_time'] < context.now:\r\n-        print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n-        return\r\n-\r\n-\r\n-    # 日内交易\r\n-    # 本次（单次）可交易总资金\r\n-    trade_value = available_cash * context.trade_cash_ratio\r\n-    trade_volume = int(trade_value / current_price) if current_price > 0 else 0\r\n-    \r\n-\r\n-    # 修改on_bar中的交易量计算（新增动态交易量）\r\n-    trade_value = min(available_cash * context.trade_cash_ratio,\r\n-                    calculate_dynamic_position(context, symbol) * current_price) \r\n-    # print(f\"[本次交易量] 计划交易量={available_cash * context.trade_cash_ratio:.2f}元 \\\r\n-    #     | 动态交易量={calculate_dynamic_position(context, symbol) * current_price:.2f}元 \\\r\n-    #     | 实际交易量={trade_value:.2f}\")\r\n-\r\n-    close = context.data(symbol=symbol,\r\n-                        frequency=context.frequency,\r\n-                        count=context.periods_time,\r\n-                        fields='close')['close'].values\r\n-    dif, dea, _ = MACD(close)\r\n-    if dif[-2] <= dea[-2] and dif[-1] > dea[-1] and check_trading_permission(context, symbol):  # 日内金叉\r\n-        if trade_volume >0:\r\n-            order_value(symbol=symbol,\r\n-                       value=trade_value,\r\n-                       side=OrderSide_Buy,\r\n-                       order_type=OrderType_Market,\r\n-                       position_effect=PositionEffect_Open)\r\n-    elif dif[-2] >= dea[-2] and dif[-1] < dea[-1] and check_trading_permission(context, symbol):  # 日内死叉\r\n-        if trade_volume >0:\r\n-            order_value(symbol=symbol,\r\n-                       value=trade_value,\r\n-                       side=OrderSide_Sell,\r\n-                       order_type=OrderType_Market,\r\n-                       position_effect=PositionEffect_Close)\r\n-\r\n-\r\n-\r\n-    # 分层卖出执行（减持）\r\n-    if generate_sell_signal(context, symbol):\r\n-        daily_data_close = context.data(symbol=symbol,\r\n-                                frequency='1d',\r\n-                                count=55,\r\n-                                fields='close')['close'].values\r\n-        # 第一层：触发基础信号\r\n-        print(f\"====触发第1层卖出信号====，减持30%\" )\r\n-        order_target_percent(symbol=symbol, percent=0.7,\r\n-                             position_side=PositionSide_Short,\r\n-                             order_type=OrderType_Market)  # 减持30%\r\n-        lock_trading(context, symbol)\r\n-        \r\n-        # 第二层：MACD零轴下强化\r\n-        dif, dea, _ = MACD(daily_data_close)\r\n-        if dif[-1] < 0:  \r\n-            print(f\"====触发第2层卖出信号====，减持20%\" )\r\n-            order_target_percent(symbol=symbol,percent=0.5,\r\n-                        position_side=PositionSide_Short,\r\n-                        order_type=OrderType_Market)  # 减持30%\r\n-            lock_trading(context, symbol)\r\n-            \r\n-        # 第三层：周线级别确认\r\n-        # 获取近一周收盘价（网页9周线处理逻辑）\r\n-        weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n-        daily_ma20 = np.mean(daily_data_close[-20:])\r\n-        if weekly_close < daily_ma20:\r\n-            print(f\"====触发第3层卖出信号====，清仓\" )\r\n-            order_target_percent(symbol=symbol,percent=0.0,\r\n-                        position_side=PositionSide_Short,\r\n-                        order_type=OrderType_Market)  \r\n-            lock_trading(context, symbol)\r\n-            # 清仓标记\r\n-            context.first[symbol] = 0\r\n-\r\n-def on_order_status(context, order):\r\n-    # 标的代码\r\n-    symbol = order['symbol']\r\n-    # 委托价格\r\n-    price = order['price']\r\n-    # 委托数量\r\n-    volume = order['volume']\r\n-    # 查看下单后的委托状态，等于3代表委托全部成交\r\n-    status = order['status']\r\n-    # 买卖方向，1为买入，2为卖出\r\n-    side = order['side']\r\n-    # 开平仓类型，1为开仓，2为平仓\r\n-    effect = order['position_effect']\r\n-    # 委托类型，1为限价委托，2为市价委托\r\n-    order_type = order['order_type']\r\n-    if status == 3:\r\n-        if effect == 1:\r\n-            if side == 1:\r\n-                side_effect = '开多仓'\r\n-            else:\r\n-                side_effect = '开空仓'\r\n-        else:\r\n-            if side == 1:\r\n-                side_effect = '平空仓'\r\n-            else:\r\n-                side_effect = '平多仓'\r\n-        order_type_word = '限价' if order_type == 1 else '市价'\r\n-        print('{}:标的：{}，操作：以{}{}，委托价格：{}，委托数量：{}'.format(\r\n-            context.now, symbol, order_type_word, side_effect, price, volume))\r\n-\r\n-\r\n-def on_backtest_finished(context, indicator):\r\n-    print('*' * 50)\r\n-    print('回测已完成，请通过右上角“回测历史”功能查询详情。')\r\n-\r\n-\r\n-if __name__ == '__main__':\r\n-    '''\r\n-    strategy_id策略ID,由系统生成\r\n-    filename文件名,请与本文件名保持一致\r\n-    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST\r\n-    token绑定计算机的ID,可在系统设置-密钥管理中生成\r\n-    backtest_start_time回测开始时间\r\n-    backtest_end_time回测结束时间\r\n-    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST\r\n-    backtest_initial_cash回测初始资金\r\n-    backtest_commission_ratio回测佣金比例\r\n-    backtest_slippage_ratio回测滑点比例\r\n-    backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n-    '''\r\n-    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=160))[:19]\r\n-    backtest_end_time = str(datetime.datetime.now())[:19]\r\n-    run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n-        filename='main.py',\r\n-        mode=MODE_BACKTEST,\r\n-        token='a39f0567e24a8c8a3d7f0cef38a71d619be4ee96',\r\n-        backtest_start_time=backtest_start_time,\r\n-        backtest_end_time=backtest_end_time,\r\n-        backtest_adjust=ADJUST_PREV,\r\n-        backtest_initial_cash=1000000,\r\n-        backtest_commission_ratio=0.0001,\r\n-        backtest_slippage_ratio=0.0001,\r\n-        backtest_match_mode=1)\r\n-\r\n"
                },
                {
                    "date": 1745723656008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,9 +184,9 @@\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n         daily_ma20 = np.mean(daily_data_close[-20:])\r\n         if weekly_close < daily_ma20:\r\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n-            order_target_percent(symbol=symbolpercent=0.0,\r\n+            order_target_percent(symbol=symbol,percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n"
                },
                {
                    "date": 1745723918622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,258 @@\n+# coding=utf-8\r\n+from __future__ import print_function, absolute_import, unicode_literals\r\n+from gm.api import *\r\n+import math\r\n+import datetime\r\n+\r\n+from QTUtils import *\r\n+\r\n+\r\n+'''\r\n+示例策略仅供参考，不建议直接实盘使用。\r\n+\r\n+日内回转交易是指投资者就同一个标的（如股票）在同一个交易日内各完成多次买进和卖出的行为\r\n+其目的为维持股票数量不变，降低股票成本\r\n+本策略以1分钟MACD为基础，金叉时买入，死叉时卖出，尾盘回转至初始仓位\r\n+'''\r\n+\r\n+\r\n+def init(context):\r\n+    # 设置标的股票\r\n+    context.all_symbols = ['SHSE.600000','SHSE.688165']\r\n+    # 用于判定第一个仓位是否成功开仓\r\n+    context.first = {symbol:0 for symbol in context.all_symbols}\r\n+     # 新增交易状态锁\r\n+    context.trading_blocked = {\r\n+        symbol: {\r\n+            'status': False,          # 交易锁状态\r\n+            'expire_time': None       # 过期时间\r\n+        } for symbol in context.all_symbols\r\n+    }\r\n+\r\n+    # 需要保持的总仓位\r\n+    # context.total = 50000\r\n+    # 日内回转每次交易数量\r\n+    # context.trade_n = 25000\r\n+    # 初始资金比例（总仓位比例）\r\n+    context.total_cash_ratio = 0.25  # 总仓位占账户资金的50%\r\n+    # 每次交易资金比例（日内回转比例）\r\n+    context.trade_cash_ratio = 0.1  # 每次交易账户可用资金的10%\r\n+    # MACD日内分时使用的频率，60s为1分钟bar，300s为5分钟bar\r\n+    context.frequency = '300s'\r\n+    # MACD日内分时回溯数据长度（计算MACD)\r\n+    context.periods_time = 1000\r\n+\r\n+    # 在init中增加择时参数\r\n+    context.risk_ratio = 0.02  # 单笔风险敞口2%\r\n+    context.atr_period = 14    # ATR计算周期\r\n+    context.trend_period = 10   # 趋势判定周期\r\n+    context.volume_ratio = 1.2  # 量能突破阈值\r\n+\r\n+    # 初始化ATR值存储到上下文\r\n+    context.atr_value = None\r\n+\r\n+    # 在策略初始化中设置\r\n+    context.sell_params = {\r\n+    'atr_multiplier': 2.2,      # AR波动过滤系数\r\n+    'resistance_buffer': 0.985, # 压力位检测缓冲\r\n+    'volume_threshold': 2.3     # 放量下跌阈值\r\n+    }\r\n+\r\n+    \r\n+    # 订阅数据日内分时数据\r\n+    subscribe(symbols=context.all_symbols,\r\n+              frequency=context.frequency,\r\n+              count=context.periods_time,\r\n+              fields='symbol,eob,close')\r\n+    # 订阅标的的日线数据，窗口长度设为55（14周期ATR+1）\r\n+    subscribe(symbols=context.all_symbols,\r\n+              frequency='1d',\r\n+              count=55)\r\n+\r\n+    # # 新增10:01定时卖出任务\r\n+    # schedule(schedule_func=daily_sell, \r\n+    #         date_rule='1d', \r\n+    #         time_rule='10:00:00')  # 网页8同花顺定时策略参考\r\n+\r\n+    schedule(schedule_func=algo, date_rule='1d', time_rule='14:55:00')\r\n+\r\n+\r\n+\r\n+# 订阅行情\r\n+def on_bar(context, bars):\r\n+    # 获取账户数据\r\n+    account = context.account()\r\n+    bar = bars[0]\r\n+    symbol = bar['symbol']\r\n+    # 获取当前价格\r\n+    current_price = bar['close']\r\n+    # 获取账户总资金\r\n+    total_cash = account.cash['nav']\r\n+    # 获取账户可用资金\r\n+    available_cash = account.cash['available']\r\n+    # 当日可交易总资金\r\n+    target_value = available_cash * context.total_cash_ratio \r\n+\r\n+\r\n+    # 初始建仓(择时建仓)\r\n+    if context.first[symbol] == 0 and current_price>0 :\r\n+        # 重置交易锁\r\n+        if context.trading_blocked[symbol]['status']:\r\n+            unlock_trading(context, symbol)\r\n+            print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n+\r\n+        if not check_timing_buy_signal(context, symbol):\r\n+            print(f\"{context.now} {symbol} 择时条件未满足，跳过建仓\")\r\n+            return\r\n+        # 表示持仓该股票\r\n+        context.first[symbol] = 1\r\n+        order_value(symbol=symbol, \r\n+                   value=target_value,\r\n+                   side=OrderSide_Buy,\r\n+                   order_type=OrderType_Market,\r\n+                   position_effect=PositionEffect_Open)\r\n+        print(f'{context.now}：{symbol}建底仓，投入资金={target_value:.2f}')\r\n+        return\r\n+\r\n+\r\n+    # # 在交易信号触发前增加锁状态检查\r\n+    if context.trading_blocked[symbol]['status'] and \\\r\n+        context.trading_blocked[symbol]['expire_time'] < context.now:\r\n+        # print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n+        return\r\n+\r\n+\r\n+    # 日内交易\r\n+    # 本次（单次）可交易总资金\r\n+    trade_value = available_cash * context.trade_cash_ratio\r\n+    trade_volume = int(trade_value / current_price) if current_price > 0 else 0\r\n+    \r\n+\r\n+    # 修改on_bar中的交易量计算（新增动态交易量）\r\n+    trade_value = min(available_cash * context.trade_cash_ratio,\r\n+                    calculate_dynamic_position(context, symbol) * current_price) \r\n+    # print(f\"[本次交易量] 计划交易量={available_cash * context.trade_cash_ratio:.2f}元 \\\r\n+    #     | 动态交易量={calculate_dynamic_position(context, symbol) * current_price:.2f}元 \\\r\n+    #     | 实际交易量={trade_value:.2f}\")\r\n+\r\n+    close = context.data(symbol=symbol,\r\n+                        frequency=context.frequency,\r\n+                        count=context.periods_time,\r\n+                        fields='close')['close'].values\r\n+    dif, dea, _ = MACD(close)\r\n+    if dif[-2] <= dea[-2] and dif[-1] > dea[-1] and check_trading_permission(context, symbol):  # 日内金叉\r\n+        if trade_volume >0:\r\n+            order_value(symbol=symbol,\r\n+                       value=trade_value,\r\n+                       side=OrderSide_Buy,\r\n+                       order_type=OrderType_Market,\r\n+                       position_effect=PositionEffect_Open)\r\n+    elif dif[-2] >= dea[-2] and dif[-1] < dea[-1] and check_trading_permission(context, symbol):  # 日内死叉\r\n+        if trade_volume >0:\r\n+            order_value(symbol=symbol,\r\n+                       value=trade_value,\r\n+                       side=OrderSide_Sell,\r\n+                       order_type=OrderType_Market,\r\n+                       position_effect=PositionEffect_Close)\r\n+\r\n+\r\n+\r\n+    # 分层卖出执行（减持）\r\n+    if generate_sell_signal(context, symbol):\r\n+        daily_data_close = context.data(symbol=symbol,\r\n+                                frequency='1d',\r\n+                                count=55,\r\n+                                fields='close')['close'].values\r\n+        # 第一层：触发基础信号\r\n+        print(f\"====触发第1层卖出信号====，减持30%\" )\r\n+        order_target_percent(symbol=symbol, percent=0.7,\r\n+                             position_side=PositionSide_Short,\r\n+                             order_type=OrderType_Market)  # 减持30%\r\n+        lock_trading(context, symbol)\r\n+        \r\n+        # 第二层：MACD零轴下强化\r\n+        dif, dea, _ = MACD(daily_data_close)\r\n+        if dif[-1] < 0:  \r\n+            print(f\"====触发第2层卖出信号====，减持20%\" )\r\n+            order_target_percent(symbol=symbol,percent=0.5,\r\n+                        position_side=PositionSide_Short,\r\n+                        order_type=OrderType_Market)  # 减持30%\r\n+            lock_trading(context, symbol)\r\n+            \r\n+        # 第三层：周线级别确认\r\n+        # 获取近一周收盘价（网页9周线处理逻辑）\r\n+        weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n+        daily_ma20 = np.mean(daily_data_close[-20:])\r\n+        if weekly_close < daily_ma20:\r\n+            print(f\"====触发第3层卖出信号====，清仓\" )\r\n+            order_target_percent(symbol=symbol,percent=0.0,\r\n+                        position_side=PositionSide_Short,\r\n+                        order_type=OrderType_Market)  \r\n+            lock_trading(context, symbol)\r\n+            # 清仓标记\r\n+            context.first[symbol] = 0\r\n+\r\n+def on_order_status(context, order):\r\n+    # 标的代码\r\n+    symbol = order['symbol']\r\n+    # 委托价格\r\n+    price = order['price']\r\n+    # 委托数量\r\n+    volume = order['volume']\r\n+    # 查看下单后的委托状态，等于3代表委托全部成交\r\n+    status = order['status']\r\n+    # 买卖方向，1为买入，2为卖出\r\n+    side = order['side']\r\n+    # 开平仓类型，1为开仓，2为平仓\r\n+    effect = order['position_effect']\r\n+    # 委托类型，1为限价委托，2为市价委托\r\n+    order_type = order['order_type']\r\n+    if status == 3:\r\n+        if effect == 1:\r\n+            if side == 1:\r\n+                side_effect = '开多仓'\r\n+            else:\r\n+                side_effect = '开空仓'\r\n+        else:\r\n+            if side == 1:\r\n+                side_effect = '平空仓'\r\n+            else:\r\n+                side_effect = '平多仓'\r\n+        order_type_word = '限价' if order_type == 1 else '市价'\r\n+        print('{}:标的：{}，操作：以{}{}，委托价格：{}，委托数量：{}'.format(\r\n+            context.now, symbol, order_type_word, side_effect, price, volume))\r\n+\r\n+\r\n+def on_backtest_finished(context, indicator):\r\n+    print('*' * 50)\r\n+    print('回测已完成，请通过右上角“回测历史”功能查询详情。')\r\n+\r\n+\r\n+if __name__ == '__main__':\r\n+    '''\r\n+    strategy_id策略ID,由系统生成\r\n+    filename文件名,请与本文件名保持一致\r\n+    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST\r\n+    token绑定计算机的ID,可在系统设置-密钥管理中生成\r\n+    backtest_start_time回测开始时间\r\n+    backtest_end_time回测结束时间\r\n+    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST\r\n+    backtest_initial_cash回测初始资金\r\n+    backtest_commission_ratio回测佣金比例\r\n+    backtest_slippage_ratio回测滑点比例\r\n+    backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n+    '''\r\n+    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=180))[:19]\r\n+    backtest_end_time = str(datetime.datetime.now())[:19]\r\n+    run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n+        filename='main.py',\r\n+        mode=MODE_BACKTEST,\r\n+        token='a39f0567e24a8c8a3d7f0cef38a71d619be4ee96',\r\n+        backtest_start_time=backtest_start_time,\r\n+        backtest_end_time=backtest_end_time,\r\n+        backtest_adjust=ADJUST_PREV,\r\n+        backtest_initial_cash=1000000,\r\n+        backtest_commission_ratio=0.0001,\r\n+        backtest_slippage_ratio=0.0001,\r\n+        backtest_match_mode=1)\r\n+\r\n"
                },
                {
                    "date": 1745724206459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,260 @@\n+# coding=utf-8\r\n+from __future__ import print_function, absolute_import, unicode_literals\r\n+from gm.api import *\r\n+import math\r\n+import datetime\r\n+\r\n+from QTUtils import *\r\n+\r\n+\r\n+'''\r\n+示例策略仅供参考，不建议直接实盘使用。\r\n+\r\n+日内回转交易是指投资者就同一个标的（如股票）在同一个交易日内各完成多次买进和卖出的行为\r\n+其目的为维持股票数量不变，降低股票成本\r\n+本策略以1分钟MACD为基础，金叉时买入，死叉时卖出，尾盘回转至初始仓位\r\n+'''\r\n+\r\n+\r\n+def init(context):\r\n+    # 设置标的股票\r\n+    context.all_symbols = ['SHSE.600000','SHSE.688165']\r\n+    # 用于判定第一个仓位是否成功开仓\r\n+    context.first = {symbol:0 for symbol in context.all_symbols}\r\n+     # 新增交易状态锁\r\n+    context.trading_blocked = {\r\n+        symbol: {\r\n+            'status': False,          # 交易锁状态\r\n+            'expire_time': None       # 过期时间\r\n+        } for symbol in context.all_symbols\r\n+    }\r\n+\r\n+    # 需要保持的总仓位\r\n+    # context.total = 50000\r\n+    # 日内回转每次交易数量\r\n+    # context.trade_n = 25000\r\n+    # 初始资金比例（总仓位比例）\r\n+    context.total_cash_ratio = 0.25  # 总仓位占账户资金的50%\r\n+    # 每次交易资金比例（日内回转比例）\r\n+    context.trade_cash_ratio = 0.1  # 每次交易账户可用资金的10%\r\n+    # MACD日内分时使用的频率，60s为1分钟bar，300s为5分钟bar\r\n+    context.frequency = '300s'\r\n+    # MACD日内分时回溯数据长度（计算MACD)\r\n+    context.periods_time = 1000\r\n+\r\n+    # 在init中增加择时参数\r\n+    context.risk_ratio = 0.02  # 单笔风险敞口2%\r\n+    context.atr_period = 14    # ATR计算周期\r\n+    context.trend_period = 10   # 趋势判定周期\r\n+    context.volume_ratio = 1.2  # 量能突破阈值\r\n+\r\n+    # 初始化ATR值存储到上下文\r\n+    context.atr_value = None\r\n+\r\n+    # 在策略初始化中设置\r\n+    context.sell_params = {\r\n+    'atr_multiplier': 2.2,      # AR波动过滤系数\r\n+    'resistance_buffer': 0.985, # 压力位检测缓冲\r\n+    'volume_threshold': 2.3     # 放量下跌阈值\r\n+    }\r\n+\r\n+    \r\n+    # 订阅数据日内分时数据\r\n+    subscribe(symbols=context.all_symbols,\r\n+              frequency=context.frequency,\r\n+              count=context.periods_time,\r\n+              fields='symbol,eob,close')\r\n+    # 订阅标的的日线数据，窗口长度设为55（14周期ATR+1）\r\n+    subscribe(symbols=context.all_symbols,\r\n+              frequency='1d',\r\n+              count=55)\r\n+\r\n+    # # 新增10:01定时卖出任务\r\n+    # schedule(schedule_func=daily_sell, \r\n+    #         date_rule='1d', \r\n+    #         time_rule='10:00:00')  # 网页8同花顺定时策略参考\r\n+\r\n+    schedule(schedule_func=algo, date_rule='1d', time_rule='14:55:00')\r\n+\r\n+\r\n+\r\n+# 订阅行情\r\n+def on_bar(context, bars):\r\n+    # 获取账户数据\r\n+    account = context.account()\r\n+    bar = bars[0]\r\n+    symbol = bar['symbol']\r\n+    # 获取当前价格\r\n+    current_price = bar['close']\r\n+    # 获取账户总资金\r\n+    total_cash = account.cash['nav']\r\n+    # 获取账户可用资金\r\n+    available_cash = account.cash['available']\r\n+    # 当日可交易总资金\r\n+    target_value = available_cash * context.total_cash_ratio \r\n+\r\n+\r\n+    # 初始建仓(择时建仓)\r\n+    if context.first[symbol] == 0 and current_price>0 :\r\n+        # 重置交易锁\r\n+        if context.trading_blocked[symbol]['status']:\r\n+            unlock_trading(context, symbol)\r\n+            print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n+\r\n+        if not check_timing_buy_signal(context, symbol):\r\n+            print(f\"{context.now} {symbol} 择时条件未满足，跳过建仓\")\r\n+            return\r\n+        # 表示持仓该股票\r\n+        context.first[symbol] = 1\r\n+        order_value(symbol=symbol, \r\n+                   value=target_value,\r\n+                   side=OrderSide_Buy,\r\n+                   order_type=OrderType_Market,\r\n+                   position_effect=PositionEffect_Open)\r\n+        print(f'{context.now}：{symbol}建底仓，投入资金={target_value:.2f}')\r\n+        return\r\n+\r\n+\r\n+    # # 在交易信号触发前增加锁状态检查\r\n+    if context.trading_blocked[symbol]['status'] and \\\r\n+        context.trading_blocked[symbol]['expire_time'] < context.now:\r\n+        # print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n+        return\r\n+\r\n+\r\n+    # 日内交易\r\n+    # 本次（单次）可交易总资金\r\n+    trade_value = available_cash * context.trade_cash_ratio\r\n+    trade_volume = int(trade_value / current_price) if current_price > 0 else 0\r\n+    \r\n+\r\n+    # 修改on_bar中的交易量计算（新增动态交易量）\r\n+    trade_value = min(available_cash * context.trade_cash_ratio,\r\n+                    calculate_dynamic_position(context, symbol) * current_price) \r\n+    # print(f\"[本次交易量] 计划交易量={available_cash * context.trade_cash_ratio:.2f}元 \\\r\n+    #     | 动态交易量={calculate_dynamic_position(context, symbol) * current_price:.2f}元 \\\r\n+    #     | 实际交易量={trade_value:.2f}\")\r\n+\r\n+    close = context.data(symbol=symbol,\r\n+                        frequency=context.frequency,\r\n+                        count=context.periods_time,\r\n+                        fields='close')['close'].values\r\n+    dif, dea, _ = MACD(close)\r\n+    if dif[-2] <= dea[-2] and dif[-1] > dea[-1] and check_trading_permission(context, symbol):  # 日内金叉\r\n+        if trade_volume >0:\r\n+            order_value(symbol=symbol,\r\n+                       value=trade_value,\r\n+                       side=OrderSide_Buy,\r\n+                       order_type=OrderType_Market,\r\n+                       position_effect=PositionEffect_Open)\r\n+    elif dif[-2] >= dea[-2] and dif[-1] < dea[-1] and check_trading_permission(context, symbol):  # 日内死叉\r\n+        if trade_volume >0:\r\n+            order_value(symbol=symbol,\r\n+                       value=trade_value,\r\n+                       side=OrderSide_Sell,\r\n+                       order_type=OrderType_Market,\r\n+                       position_effect=PositionEffect_Close)\r\n+\r\n+\r\n+\r\n+    # 分层卖出执行（减持）\r\n+    if generate_sell_signal(context, symbol):\r\n+        daily_data_close = context.data(symbol=symbol,\r\n+                                frequency='1d',\r\n+                                count=55,\r\n+                                fields='close')['close'].values\r\n+        # 第一层：触发基础信号\r\n+        print(f\"====触发第1层卖出信号====，减持30%\" )\r\n+        order_target_percent(symbol=symbol, percent=0.7,\r\n+                             position_side=PositionSide_Short,\r\n+                             order_type=OrderType_Market)  # 减持30%\r\n+        lock_trading(context, symbol)\r\n+        \r\n+        # 第二层：MACD零轴下强化\r\n+        dif, dea, _ = MACD(daily_data_close)\r\n+        if dif[-1] < 0:  \r\n+            print(f\"====触发第2层卖出信号====，减持20%\" )\r\n+            order_target_percent(symbol=symbol,percent=0.5,\r\n+                        position_side=PositionSide_Short,\r\n+                        order_type=OrderType_Market)  # 减持30%\r\n+            lock_trading(context, symbol)\r\n+            \r\n+        # 第三层：周线级别确认\r\n+        # 获取近一周收盘价（网页9周线处理逻辑）\r\n+        weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n+        daily_ma20 = np.mean(daily_data_close[-20:])\r\n+        if weekly_close < daily_ma20:\r\n+            print(f\"====触发第3层卖出信号====，清仓\" )\r\n+            order_target_percent(symbol=symbol,percent=0.0,\r\n+                        position_side=PositionSide_Short,\r\n+                        order_type=OrderType_Market)  \r\n+            lock_trading(context, symbol)\r\n+            # 清仓标记\r\n+            context.first[symbol] = 0\r\n+\r\n+        \r\n+\r\n+def on_order_status(context, order):\r\n+    # 标的代码\r\n+    symbol = order['symbol']\r\n+    # 委托价格\r\n+    price = order['price']\r\n+    # 委托数量\r\n+    volume = order['volume']\r\n+    # 查看下单后的委托状态，等于3代表委托全部成交\r\n+    status = order['status']\r\n+    # 买卖方向，1为买入，2为卖出\r\n+    side = order['side']\r\n+    # 开平仓类型，1为开仓，2为平仓\r\n+    effect = order['position_effect']\r\n+    # 委托类型，1为限价委托，2为市价委托\r\n+    order_type = order['order_type']\r\n+    if status == 3:\r\n+        if effect == 1:\r\n+            if side == 1:\r\n+                side_effect = '开多仓'\r\n+            else:\r\n+                side_effect = '开空仓'\r\n+        else:\r\n+            if side == 1:\r\n+                side_effect = '平空仓'\r\n+            else:\r\n+                side_effect = '平多仓'\r\n+        order_type_word = '限价' if order_type == 1 else '市价'\r\n+        print('{}:标的：{}，操作：以{}{}，委托价格：{}，委托数量：{}'.format(\r\n+            context.now, symbol, order_type_word, side_effect, price, volume))\r\n+\r\n+\r\n+def on_backtest_finished(context, indicator):\r\n+    print('*' * 50)\r\n+    print('回测已完成，请通过右上角“回测历史”功能查询详情。')\r\n+\r\n+\r\n+if __name__ == '__main__':\r\n+    '''\r\n+    strategy_id策略ID,由系统生成\r\n+    filename文件名,请与本文件名保持一致\r\n+    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST\r\n+    token绑定计算机的ID,可在系统设置-密钥管理中生成\r\n+    backtest_start_time回测开始时间\r\n+    backtest_end_time回测结束时间\r\n+    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST\r\n+    backtest_initial_cash回测初始资金\r\n+    backtest_commission_ratio回测佣金比例\r\n+    backtest_slippage_ratio回测滑点比例\r\n+    backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n+    '''\r\n+    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=180))[:19]\r\n+    backtest_end_time = str(datetime.datetime.now())[:19]\r\n+    run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n+        filename='main.py',\r\n+        mode=MODE_BACKTEST,\r\n+        token='a39f0567e24a8c8a3d7f0cef38a71d619be4ee96',\r\n+        backtest_start_time=backtest_start_time,\r\n+        backtest_end_time=backtest_end_time,\r\n+        backtest_adjust=ADJUST_PREV,\r\n+        backtest_initial_cash=1000000,\r\n+        backtest_commission_ratio=0.0001,\r\n+        backtest_slippage_ratio=0.0001,\r\n+        backtest_match_mode=1)\r\n+\r\n"
                },
                {
                    "date": 1745724212879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,9 @@\n                         order_type=OrderType_Market)  \r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n             context.first[symbol] = 0\r\n-\r\n+            eod_position_summary\r\n         \r\n \r\n def on_order_status(context, order):\r\n     # 标的代码\r\n@@ -257,520 +257,4 @@\n         backtest_commission_ratio=0.0001,\r\n         backtest_slippage_ratio=0.0001,\r\n         backtest_match_mode=1)\r\n \r\n-# coding=utf-8\r\n-from __future__ import print_function, absolute_import, unicode_literals\r\n-from gm.api import *\r\n-import math\r\n-import datetime\r\n-\r\n-from QTUtils import *\r\n-\r\n-\r\n-'''\r\n-示例策略仅供参考，不建议直接实盘使用。\r\n-\r\n-日内回转交易是指投资者就同一个标的（如股票）在同一个交易日内各完成多次买进和卖出的行为\r\n-其目的为维持股票数量不变，降低股票成本\r\n-本策略以1分钟MACD为基础，金叉时买入，死叉时卖出，尾盘回转至初始仓位\r\n-'''\r\n-\r\n-\r\n-def init(context):\r\n-    # 设置标的股票\r\n-    context.all_symbols = ['SHSE.600000','SHSE.688165']\r\n-    # 用于判定第一个仓位是否成功开仓\r\n-    context.first = {symbol:0 for symbol in context.all_symbols}\r\n-     # 新增交易状态锁\r\n-    context.trading_blocked = {\r\n-        symbol: {\r\n-            'status': False,          # 交易锁状态\r\n-            'expire_time': None       # 过期时间\r\n-        } for symbol in context.all_symbols\r\n-    }\r\n-\r\n-    # 需要保持的总仓位\r\n-    # context.total = 50000\r\n-    # 日内回转每次交易数量\r\n-    # context.trade_n = 25000\r\n-    # 初始资金比例（总仓位比例）\r\n-    context.total_cash_ratio = 0.25  # 总仓位占账户资金的50%\r\n-    # 每次交易资金比例（日内回转比例）\r\n-    context.trade_cash_ratio = 0.1  # 每次交易账户可用资金的10%\r\n-    # MACD日内分时使用的频率，60s为1分钟bar，300s为5分钟bar\r\n-    context.frequency = '300s'\r\n-    # MACD日内分时回溯数据长度（计算MACD)\r\n-    context.periods_time = 1000\r\n-\r\n-    # 在init中增加择时参数\r\n-    context.risk_ratio = 0.02  # 单笔风险敞口2%\r\n-    context.atr_period = 14    # ATR计算周期\r\n-    context.trend_period = 10   # 趋势判定周期\r\n-    context.volume_ratio = 1.2  # 量能突破阈值\r\n-\r\n-    # 初始化ATR值存储到上下文\r\n-    context.atr_value = None\r\n-\r\n-    # 在策略初始化中设置\r\n-    context.sell_params = {\r\n-    'atr_multiplier': 2.2,      # AR波动过滤系数\r\n-    'resistance_buffer': 0.985, # 压力位检测缓冲\r\n-    'volume_threshold': 2.3     # 放量下跌阈值\r\n-    }\r\n-\r\n-    \r\n-    # 订阅数据日内分时数据\r\n-    subscribe(symbols=context.all_symbols,\r\n-              frequency=context.frequency,\r\n-              count=context.periods_time,\r\n-              fields='symbol,eob,close')\r\n-    # 订阅标的的日线数据，窗口长度设为55（14周期ATR+1）\r\n-    subscribe(symbols=context.all_symbols,\r\n-              frequency='1d',\r\n-              count=55)\r\n-\r\n-    # # 新增10:01定时卖出任务\r\n-    # schedule(schedule_func=daily_sell, \r\n-    #         date_rule='1d', \r\n-    #         time_rule='10:00:00')  # 网页8同花顺定时策略参考\r\n-\r\n-    schedule(schedule_func=algo, date_rule='1d', time_rule='14:55:00')\r\n-\r\n-\r\n-\r\n-# 订阅行情\r\n-def on_bar(context, bars):\r\n-    # 获取账户数据\r\n-    account = context.account()\r\n-    bar = bars[0]\r\n-    symbol = bar['symbol']\r\n-    # 获取当前价格\r\n-    current_price = bar['close']\r\n-    # 获取账户总资金\r\n-    total_cash = account.cash['nav']\r\n-    # 获取账户可用资金\r\n-    available_cash = account.cash['available']\r\n-    # 当日可交易总资金\r\n-    target_value = available_cash * context.total_cash_ratio \r\n-\r\n-\r\n-    # 初始建仓(择时建仓)\r\n-    if context.first[symbol] == 0 and current_price>0 :\r\n-        # 重置交易锁\r\n-        if context.trading_blocked[symbol]['status']:\r\n-            unlock_trading(context, symbol)\r\n-            print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n-\r\n-        if not check_timing_buy_signal(context, symbol):\r\n-            print(f\"{context.now} {symbol} 择时条件未满足，跳过建仓\")\r\n-            return\r\n-        # 表示持仓该股票\r\n-        context.first[symbol] = 1\r\n-        order_value(symbol=symbol, \r\n-                   value=target_value,\r\n-                   side=OrderSide_Buy,\r\n-                   order_type=OrderType_Market,\r\n-                   position_effect=PositionEffect_Open)\r\n-        print(f'{context.now}：{symbol}建底仓，投入资金={target_value:.2f}')\r\n-        return\r\n-\r\n-\r\n-    # # 在交易信号触发前增加锁状态检查\r\n-    if context.trading_blocked[symbol]['status'] and \\\r\n-        context.trading_blocked[symbol]['expire_time'] < context.now:\r\n-        # print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n-        return\r\n-\r\n-\r\n-    # 日内交易\r\n-    # 本次（单次）可交易总资金\r\n-    trade_value = available_cash * context.trade_cash_ratio\r\n-    trade_volume = int(trade_value / current_price) if current_price > 0 else 0\r\n-    \r\n-\r\n-    # 修改on_bar中的交易量计算（新增动态交易量）\r\n-    trade_value = min(available_cash * context.trade_cash_ratio,\r\n-                    calculate_dynamic_position(context, symbol) * current_price) \r\n-    # print(f\"[本次交易量] 计划交易量={available_cash * context.trade_cash_ratio:.2f}元 \\\r\n-    #     | 动态交易量={calculate_dynamic_position(context, symbol) * current_price:.2f}元 \\\r\n-    #     | 实际交易量={trade_value:.2f}\")\r\n-\r\n-    close = context.data(symbol=symbol,\r\n-                        frequency=context.frequency,\r\n-                        count=context.periods_time,\r\n-                        fields='close')['close'].values\r\n-    dif, dea, _ = MACD(close)\r\n-    if dif[-2] <= dea[-2] and dif[-1] > dea[-1] and check_trading_permission(context, symbol):  # 日内金叉\r\n-        if trade_volume >0:\r\n-            order_value(symbol=symbol,\r\n-                       value=trade_value,\r\n-                       side=OrderSide_Buy,\r\n-                       order_type=OrderType_Market,\r\n-                       position_effect=PositionEffect_Open)\r\n-    elif dif[-2] >= dea[-2] and dif[-1] < dea[-1] and check_trading_permission(context, symbol):  # 日内死叉\r\n-        if trade_volume >0:\r\n-            order_value(symbol=symbol,\r\n-                       value=trade_value,\r\n-                       side=OrderSide_Sell,\r\n-                       order_type=OrderType_Market,\r\n-                       position_effect=PositionEffect_Close)\r\n-\r\n-\r\n-\r\n-    # 分层卖出执行（减持）\r\n-    if generate_sell_signal(context, symbol):\r\n-        daily_data_close = context.data(symbol=symbol,\r\n-                                frequency='1d',\r\n-                                count=55,\r\n-                                fields='close')['close'].values\r\n-        # 第一层：触发基础信号\r\n-        print(f\"====触发第1层卖出信号====，减持30%\" )\r\n-        order_target_percent(symbol=symbol, percent=0.7,\r\n-                             position_side=PositionSide_Short,\r\n-                             order_type=OrderType_Market)  # 减持30%\r\n-        lock_trading(context, symbol)\r\n-        \r\n-        # 第二层：MACD零轴下强化\r\n-        dif, dea, _ = MACD(daily_data_close)\r\n-        if dif[-1] < 0:  \r\n-            print(f\"====触发第2层卖出信号====，减持20%\" )\r\n-            order_target_percent(symbol=symbol,percent=0.5,\r\n-                        position_side=PositionSide_Short,\r\n-                        order_type=OrderType_Market)  # 减持30%\r\n-            lock_trading(context, symbol)\r\n-            \r\n-        # 第三层：周线级别确认\r\n-        # 获取近一周收盘价（网页9周线处理逻辑）\r\n-        weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n-        daily_ma20 = np.mean(daily_data_close[-20:])\r\n-        if weekly_close < daily_ma20:\r\n-            print(f\"====触发第3层卖出信号====，清仓\" )\r\n-            order_target_percent(symbol=symbol,percent=0.0,\r\n-                        position_side=PositionSide_Short,\r\n-                        order_type=OrderType_Market)  \r\n-            lock_trading(context, symbol)\r\n-            # 清仓标记\r\n-            context.first[symbol] = 0\r\n-\r\n-def on_order_status(context, order):\r\n-    # 标的代码\r\n-    symbol = order['symbol']\r\n-    # 委托价格\r\n-    price = order['price']\r\n-    # 委托数量\r\n-    volume = order['volume']\r\n-    # 查看下单后的委托状态，等于3代表委托全部成交\r\n-    status = order['status']\r\n-    # 买卖方向，1为买入，2为卖出\r\n-    side = order['side']\r\n-    # 开平仓类型，1为开仓，2为平仓\r\n-    effect = order['position_effect']\r\n-    # 委托类型，1为限价委托，2为市价委托\r\n-    order_type = order['order_type']\r\n-    if status == 3:\r\n-        if effect == 1:\r\n-            if side == 1:\r\n-                side_effect = '开多仓'\r\n-            else:\r\n-                side_effect = '开空仓'\r\n-        else:\r\n-            if side == 1:\r\n-                side_effect = '平空仓'\r\n-            else:\r\n-                side_effect = '平多仓'\r\n-        order_type_word = '限价' if order_type == 1 else '市价'\r\n-        print('{}:标的：{}，操作：以{}{}，委托价格：{}，委托数量：{}'.format(\r\n-            context.now, symbol, order_type_word, side_effect, price, volume))\r\n-\r\n-\r\n-def on_backtest_finished(context, indicator):\r\n-    print('*' * 50)\r\n-    print('回测已完成，请通过右上角“回测历史”功能查询详情。')\r\n-\r\n-\r\n-if __name__ == '__main__':\r\n-    '''\r\n-    strategy_id策略ID,由系统生成\r\n-    filename文件名,请与本文件名保持一致\r\n-    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST\r\n-    token绑定计算机的ID,可在系统设置-密钥管理中生成\r\n-    backtest_start_time回测开始时间\r\n-    backtest_end_time回测结束时间\r\n-    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST\r\n-    backtest_initial_cash回测初始资金\r\n-    backtest_commission_ratio回测佣金比例\r\n-    backtest_slippage_ratio回测滑点比例\r\n-    backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n-    '''\r\n-    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=180))[:19]\r\n-    backtest_end_time = str(datetime.datetime.now())[:19]\r\n-    run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n-        filename='main.py',\r\n-        mode=MODE_BACKTEST,\r\n-        token='a39f0567e24a8c8a3d7f0cef38a71d619be4ee96',\r\n-        backtest_start_time=backtest_start_time,\r\n-        backtest_end_time=backtest_end_time,\r\n-        backtest_adjust=ADJUST_PREV,\r\n-        backtest_initial_cash=1000000,\r\n-        backtest_commission_ratio=0.0001,\r\n-        backtest_slippage_ratio=0.0001,\r\n-        backtest_match_mode=1)\r\n-\r\n-# coding=utf-8\r\n-from __future__ import print_function, absolute_import, unicode_literals\r\n-from gm.api import *\r\n-import math\r\n-import datetime\r\n-\r\n-from QTUtils import *\r\n-\r\n-\r\n-'''\r\n-示例策略仅供参考，不建议直接实盘使用。\r\n-\r\n-日内回转交易是指投资者就同一个标的（如股票）在同一个交易日内各完成多次买进和卖出的行为\r\n-其目的为维持股票数量不变，降低股票成本\r\n-本策略以1分钟MACD为基础，金叉时买入，死叉时卖出，尾盘回转至初始仓位\r\n-'''\r\n-\r\n-\r\n-def init(context):\r\n-    # 设置标的股票\r\n-    context.all_symbols = ['SHSE.600000','SHSE.688165']\r\n-    # 用于判定第一个仓位是否成功开仓\r\n-    context.first = {symbol:0 for symbol in context.all_symbols}\r\n-     # 新增交易状态锁\r\n-    context.trading_blocked = {\r\n-        symbol: {\r\n-            'status': False,          # 交易锁状态\r\n-            'expire_time': None       # 过期时间\r\n-        } for symbol in context.all_symbols\r\n-    }\r\n-\r\n-    # 需要保持的总仓位\r\n-    # context.total = 50000\r\n-    # 日内回转每次交易数量\r\n-    # context.trade_n = 25000\r\n-    # 初始资金比例（总仓位比例）\r\n-    context.total_cash_ratio = 0.25  # 总仓位占账户资金的50%\r\n-    # 每次交易资金比例（日内回转比例）\r\n-    context.trade_cash_ratio = 0.1  # 每次交易账户可用资金的10%\r\n-    # MACD日内分时使用的频率，60s为1分钟bar，300s为5分钟bar\r\n-    context.frequency = '300s'\r\n-    # MACD日内分时回溯数据长度（计算MACD)\r\n-    context.periods_time = 1000\r\n-\r\n-    # 在init中增加择时参数\r\n-    context.risk_ratio = 0.02  # 单笔风险敞口2%\r\n-    context.atr_period = 14    # ATR计算周期\r\n-    context.trend_period = 10   # 趋势判定周期\r\n-    context.volume_ratio = 1.2  # 量能突破阈值\r\n-\r\n-    # 初始化ATR值存储到上下文\r\n-    context.atr_value = None\r\n-\r\n-    # 在策略初始化中设置\r\n-    context.sell_params = {\r\n-    'atr_multiplier': 2.2,      # AR波动过滤系数\r\n-    'resistance_buffer': 0.985, # 压力位检测缓冲\r\n-    'volume_threshold': 2.3     # 放量下跌阈值\r\n-    }\r\n-\r\n-    \r\n-    # 订阅数据日内分时数据\r\n-    subscribe(symbols=context.all_symbols,\r\n-              frequency=context.frequency,\r\n-              count=context.periods_time,\r\n-              fields='symbol,eob,close')\r\n-    # 订阅标的的日线数据，窗口长度设为55（14周期ATR+1）\r\n-    subscribe(symbols=context.all_symbols,\r\n-              frequency='1d',\r\n-              count=55)\r\n-\r\n-    # # 新增10:01定时卖出任务\r\n-    # schedule(schedule_func=daily_sell, \r\n-    #         date_rule='1d', \r\n-    #         time_rule='10:00:00')  # 网页8同花顺定时策略参考\r\n-\r\n-    schedule(schedule_func=algo, date_rule='1d', time_rule='14:55:00')\r\n-\r\n-\r\n-\r\n-# 订阅行情\r\n-def on_bar(context, bars):\r\n-    # 获取账户数据\r\n-    account = context.account()\r\n-    bar = bars[0]\r\n-    symbol = bar['symbol']\r\n-    # 获取当前价格\r\n-    current_price = bar['close']\r\n-    # 获取账户总资金\r\n-    total_cash = account.cash['nav']\r\n-    # 获取账户可用资金\r\n-    available_cash = account.cash['available']\r\n-    # 当日可交易总资金\r\n-    target_value = available_cash * context.total_cash_ratio \r\n-\r\n-\r\n-    # 初始建仓(择时建仓)\r\n-    if context.first[symbol] == 0 and current_price>0 :\r\n-        # 重置交易锁\r\n-        if context.trading_blocked[symbol]['status']:\r\n-            unlock_trading(context, symbol)\r\n-            print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n-\r\n-        if not check_timing_buy_signal(context, symbol):\r\n-            print(f\"{context.now} {symbol} 择时条件未满足，跳过建仓\")\r\n-            return\r\n-        # 表示持仓该股票\r\n-        context.first[symbol] = 1\r\n-        order_value(symbol=symbol, \r\n-                   value=target_value,\r\n-                   side=OrderSide_Buy,\r\n-                   order_type=OrderType_Market,\r\n-                   position_effect=PositionEffect_Open)\r\n-        print(f'{context.now}：{symbol}建底仓，投入资金={target_value:.2f}')\r\n-        return\r\n-\r\n-\r\n-    # # 在交易信号触发前增加锁状态检查\r\n-    if context.trading_blocked[symbol]['status'] and \\\r\n-        context.trading_blocked[symbol]['expire_time'] < context.now:\r\n-        print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n-        return\r\n-\r\n-\r\n-    # 日内交易\r\n-    # 本次（单次）可交易总资金\r\n-    trade_value = available_cash * context.trade_cash_ratio\r\n-    trade_volume = int(trade_value / current_price) if current_price > 0 else 0\r\n-    \r\n-\r\n-    # 修改on_bar中的交易量计算（新增动态交易量）\r\n-    trade_value = min(available_cash * context.trade_cash_ratio,\r\n-                    calculate_dynamic_position(context, symbol) * current_price) \r\n-    # print(f\"[本次交易量] 计划交易量={available_cash * context.trade_cash_ratio:.2f}元 \\\r\n-    #     | 动态交易量={calculate_dynamic_position(context, symbol) * current_price:.2f}元 \\\r\n-    #     | 实际交易量={trade_value:.2f}\")\r\n-\r\n-    close = context.data(symbol=symbol,\r\n-                        frequency=context.frequency,\r\n-                        count=context.periods_time,\r\n-                        fields='close')['close'].values\r\n-    dif, dea, _ = MACD(close)\r\n-    if dif[-2] <= dea[-2] and dif[-1] > dea[-1] and check_trading_permission(context, symbol):  # 日内金叉\r\n-        if trade_volume >0:\r\n-            order_value(symbol=symbol,\r\n-                       value=trade_value,\r\n-                       side=OrderSide_Buy,\r\n-                       order_type=OrderType_Market,\r\n-                       position_effect=PositionEffect_Open)\r\n-    elif dif[-2] >= dea[-2] and dif[-1] < dea[-1] and check_trading_permission(context, symbol):  # 日内死叉\r\n-        if trade_volume >0:\r\n-            order_value(symbol=symbol,\r\n-                       value=trade_value,\r\n-                       side=OrderSide_Sell,\r\n-                       order_type=OrderType_Market,\r\n-                       position_effect=PositionEffect_Close)\r\n-\r\n-\r\n-\r\n-    # 分层卖出执行（减持）\r\n-    if generate_sell_signal(context, symbol):\r\n-        daily_data_close = context.data(symbol=symbol,\r\n-                                frequency='1d',\r\n-                                count=55,\r\n-                                fields='close')['close'].values\r\n-        # 第一层：触发基础信号\r\n-        print(f\"====触发第1层卖出信号====，减持30%\" )\r\n-        order_target_percent(symbol=symbol, percent=0.7,\r\n-                             position_side=PositionSide_Short,\r\n-                             order_type=OrderType_Market)  # 减持30%\r\n-        lock_trading(context, symbol)\r\n-        \r\n-        # 第二层：MACD零轴下强化\r\n-        dif, dea, _ = MACD(daily_data_close)\r\n-        if dif[-1] < 0:  \r\n-            print(f\"====触发第2层卖出信号====，减持20%\" )\r\n-            order_target_percent(symbol=symbol,percent=0.5,\r\n-                        position_side=PositionSide_Short,\r\n-                        order_type=OrderType_Market)  # 减持30%\r\n-            lock_trading(context, symbol)\r\n-            \r\n-        # 第三层：周线级别确认\r\n-        # 获取近一周收盘价（网页9周线处理逻辑）\r\n-        weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n-        daily_ma20 = np.mean(daily_data_close[-20:])\r\n-        if weekly_close < daily_ma20:\r\n-            print(f\"====触发第3层卖出信号====，清仓\" )\r\n-            order_target_percent(symbol=symbol,percent=0.0,\r\n-                        position_side=PositionSide_Short,\r\n-                        order_type=OrderType_Market)  \r\n-            lock_trading(context, symbol)\r\n-            # 清仓标记\r\n-            context.first[symbol] = 0\r\n-\r\n-def on_order_status(context, order):\r\n-    # 标的代码\r\n-    symbol = order['symbol']\r\n-    # 委托价格\r\n-    price = order['price']\r\n-    # 委托数量\r\n-    volume = order['volume']\r\n-    # 查看下单后的委托状态，等于3代表委托全部成交\r\n-    status = order['status']\r\n-    # 买卖方向，1为买入，2为卖出\r\n-    side = order['side']\r\n-    # 开平仓类型，1为开仓，2为平仓\r\n-    effect = order['position_effect']\r\n-    # 委托类型，1为限价委托，2为市价委托\r\n-    order_type = order['order_type']\r\n-    if status == 3:\r\n-        if effect == 1:\r\n-            if side == 1:\r\n-                side_effect = '开多仓'\r\n-            else:\r\n-                side_effect = '开空仓'\r\n-        else:\r\n-            if side == 1:\r\n-                side_effect = '平空仓'\r\n-            else:\r\n-                side_effect = '平多仓'\r\n-        order_type_word = '限价' if order_type == 1 else '市价'\r\n-        print('{}:标的：{}，操作：以{}{}，委托价格：{}，委托数量：{}'.format(\r\n-            context.now, symbol, order_type_word, side_effect, price, volume))\r\n-\r\n-\r\n-def on_backtest_finished(context, indicator):\r\n-    print('*' * 50)\r\n-    print('回测已完成，请通过右上角“回测历史”功能查询详情。')\r\n-\r\n-\r\n-if __name__ == '__main__':\r\n-    '''\r\n-    strategy_id策略ID,由系统生成\r\n-    filename文件名,请与本文件名保持一致\r\n-    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST\r\n-    token绑定计算机的ID,可在系统设置-密钥管理中生成\r\n-    backtest_start_time回测开始时间\r\n-    backtest_end_time回测结束时间\r\n-    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST\r\n-    backtest_initial_cash回测初始资金\r\n-    backtest_commission_ratio回测佣金比例\r\n-    backtest_slippage_ratio回测滑点比例\r\n-    backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n-    '''\r\n-    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=180))[:19]\r\n-    backtest_end_time = str(datetime.datetime.now())[:19]\r\n-    run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n-        filename='main.py',\r\n-        mode=MODE_BACKTEST,\r\n-        token='a39f0567e24a8c8a3d7f0cef38a71d619be4ee96',\r\n-        backtest_start_time=backtest_start_time,\r\n-        backtest_end_time=backtest_end_time,\r\n-        backtest_adjust=ADJUST_PREV,\r\n-        backtest_initial_cash=1000000,\r\n-        backtest_commission_ratio=0.0001,\r\n-        backtest_slippage_ratio=0.0001,\r\n-        backtest_match_mode=1)\r\n-\r\n"
                },
                {
                    "date": 1745724219699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,9 @@\n                         order_type=OrderType_Market)  \r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n             context.first[symbol] = 0\r\n-            eod_position_summary\r\n+            eod_position_summary(context);\r\n         \r\n \r\n def on_order_status(context, order):\r\n     # 标的代码\r\n"
                },
                {
                    "date": 1745724722043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n                                 count=55,\r\n                                 fields='close')['close'].values\r\n         # 第一层：触发基础信号\r\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n-        order_target_percent(symbol=symbol, percent=0.7,\r\n+        temp = order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n         lock_trading(context, symbol)\r\n         \r\n"
                },
                {
                    "date": 1745724727403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,8 +167,9 @@\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         temp = order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n+        print\r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n"
                },
                {
                    "date": 1745724926581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         temp = order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n-        print\r\n+        print(temp)\r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n@@ -183,17 +183,17 @@\n         # 第三层：周线级别确认\r\n         # 获取近一周收盘价（网页9周线处理逻辑）\r\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n         daily_ma20 = np.mean(daily_data_close[-20:])\r\n-        if weekly_close < daily_ma20:\r\n+`        if weekly_close < daily_ma20:\r\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n             order_target_percent(symbol=symbol,percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n             context.first[symbol] = 0\r\n-            eod_position_summary(context);\r\n+            eod_position_summary(context);`\r\n         \r\n \r\n def on_order_status(context, order):\r\n     # 标的代码\r\n"
                },
                {
                    "date": 1745724931905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,17 +183,17 @@\n         # 第三层：周线级别确认\r\n         # 获取近一周收盘价（网页9周线处理逻辑）\r\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n         daily_ma20 = np.mean(daily_data_close[-20:])\r\n-`        if weekly_close < daily_ma20:\r\n+        if weekly_close < daily_ma20:\r\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n             order_target_percent(symbol=symbol,percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n             context.first[symbol] = 0\r\n-            eod_position_summary(context);`\r\n+            eod_position_summary(context);\r\n         \r\n \r\n def on_order_status(context, order):\r\n     # 标的代码\r\n"
                },
                {
                    "date": 1745724938948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,17 +183,17 @@\n         # 第三层：周线级别确认\r\n         # 获取近一周收盘价（网页9周线处理逻辑）\r\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n         daily_ma20 = np.mean(daily_data_close[-20:])\r\n-        if weekly_close < daily_ma20:\r\n+        `if weekly_close < daily_ma20:\r\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n             order_target_percent(symbol=symbol,percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n             context.first[symbol] = 0\r\n-            eod_position_summary(context);\r\n+            eod_position_summary(context);`\r\n         \r\n \r\n def on_order_status(context, order):\r\n     # 标的代码\r\n"
                },
                {
                    "date": 1745724947933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,17 +183,17 @@\n         # 第三层：周线级别确认\r\n         # 获取近一周收盘价（网页9周线处理逻辑）\r\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n         daily_ma20 = np.mean(daily_data_close[-20:])\r\n-        `if weekly_close < daily_ma20:\r\n-            print(f\"====触发第3层卖出信号====，清仓\" )\r\n-            order_target_percent(symbol=symbol,percent=0.0,\r\n-                        position_side=PositionSide_Short,\r\n-                        order_type=OrderType_Market)  \r\n-            lock_trading(context, symbol)\r\n-            # 清仓标记\r\n-            context.first[symbol] = 0\r\n-            eod_position_summary(context);`\r\n+            if weekly_close < daily_ma20:\r\n+                print(f\"====触发第3层卖出信号====，清仓\" )\r\n+                order_target_percent(symbol=symbol,percent=0.0,\r\n+                            position_side=PositionSide_Short,\r\n+                            order_type=OrderType_Market)  \r\n+                lock_trading(context, symbol)\r\n+                # 清仓标记\r\n+                context.first[symbol] = 0\r\n+                eod_position_summary(context);\r\n         \r\n \r\n def on_order_status(context, order):\r\n     # 标的代码\r\n"
                },
                {
                    "date": 1745724959693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -183,17 +183,17 @@\n         # 第三层：周线级别确认\r\n         # 获取近一周收盘价（网页9周线处理逻辑）\r\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n         daily_ma20 = np.mean(daily_data_close[-20:])\r\n-            if weekly_close < daily_ma20:\r\n-                print(f\"====触发第3层卖出信号====，清仓\" )\r\n-                order_target_percent(symbol=symbol,percent=0.0,\r\n-                            position_side=PositionSide_Short,\r\n-                            order_type=OrderType_Market)  \r\n-                lock_trading(context, symbol)\r\n-                # 清仓标记\r\n-                context.first[symbol] = 0\r\n-                eod_position_summary(context);\r\n+        if weekly_close < daily_ma20:\r\n+            print(f\"====触发第3层卖出信号====，清仓\" )\r\n+            order_target_percent(symbol=symbol,percent=0.0,\r\n+                        position_side=PositionSide_Short,\r\n+                        order_type=OrderType_Market)  \r\n+            lock_trading(context, symbol)\r\n+            # 清仓标记\r\n+            context.first[symbol] = 0\r\n+            eod_position_summary(context);\r\n         \r\n \r\n def on_order_status(context, order):\r\n     # 标的代码\r\n"
                },
                {
                    "date": 1745724994421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n                                 count=55,\r\n                                 fields='close')['close'].values\r\n         # 第一层：触发基础信号\r\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n-        temp = order_target_percent(symbol=symbol, percent=0.7,\r\n+        order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n         print(temp)\r\n         lock_trading(context, symbol)\r\n"
                },
                {
                    "date": 1745724999667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n-        print(temp)\r\n+       \r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n@@ -185,9 +185,9 @@\n         weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n         daily_ma20 = np.mean(daily_data_close[-20:])\r\n         if weekly_close < daily_ma20:\r\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n-            order_target_percent(symbol=symbol,percent=0.0,\r\n+            temp = order_target_percent(symbol=symbol,percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n"
                },
                {
                    "date": 1745725005888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,8 @@\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n-       \r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n@@ -188,8 +187,9 @@\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n             temp = order_target_percent(symbol=symbol,percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n+             print(temp)\r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n             context.first[symbol] = 0\r\n             eod_position_summary(context);\r\n"
                },
                {
                    "date": 1745725653495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,8 +167,9 @@\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n+        on_order_status\r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n@@ -187,9 +188,9 @@\n             print(f\"====触发第3层卖出信号====，清仓\" )\r\n             temp = order_target_percent(symbol=symbol,percent=0.0,\r\n                         position_side=PositionSide_Short,\r\n                         order_type=OrderType_Market)  \r\n-             print(temp)\r\n+            print(temp)\r\n             lock_trading(context, symbol)\r\n             # 清仓标记\r\n             context.first[symbol] = 0\r\n             eod_position_summary(context);\r\n"
                },
                {
                    "date": 1745725720571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,12 +164,10 @@\n                                 count=55,\r\n                                 fields='close')['close'].values\r\n         # 第一层：触发基础信号\r\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n-        order_target_percent(symbol=symbol, percent=0.7,\r\n-                             position_side=PositionSide_Short,\r\n-                             order_type=OrderType_Market)  # 减持30%\r\n-        on_order_status\r\n+        \r\n+        on_order_status()\r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n"
                },
                {
                    "date": 1745725727612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,9 @@\n                                 fields='close')['close'].values\r\n         # 第一层：触发基础信号\r\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         \r\n-        on_order_status()\r\n+        on_order_status(context=cont)\r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n"
                },
                {
                    "date": 1745725736333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,9 +165,11 @@\n                                 fields='close')['close'].values\r\n         # 第一层：触发基础信号\r\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         \r\n-        on_order_status(context=cont)\r\n+        on_order_status(context=context, order_target_percent(symbol=symbol, percent=0.7,\r\n+                             position_side=PositionSide_Short,\r\n+                             order_type=OrderType_Market))  # 减持30%)\r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n"
                },
                {
                    "date": 1745725770202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,11 +165,9 @@\n                                 fields='close')['close'].values\r\n         # 第一层：触发基础信号\r\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         \r\n-        on_order_status(context=context, order_target_percent(symbol=symbol, percent=0.7,\r\n-                             position_side=PositionSide_Short,\r\n-                             order_type=OrderType_Market))  # 减持30%)\r\n+        on_order_status(context=context, )\r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n"
                },
                {
                    "date": 1745725782666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,10 +164,13 @@\n                                 count=55,\r\n                                 fields='close')['close'].values\r\n         # 第一层：触发基础信号\r\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n+        order_target_percent(symbol=symbol, percent=0.7,\r\n+                             position_side=PositionSide_Short,\r\n+                             order_type=OrderType_Market)  # 减持30%\r\n         \r\n-        on_order_status(context=context, )\r\n+        on_order_status\r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n         dif, dea, _ = MACD(daily_data_close)\r\n"
                },
                {
                    "date": 1745725903365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n         print(f\"====触发第1层卖出信号====，减持30%\" )\r\n         order_target_percent(symbol=symbol, percent=0.7,\r\n                              position_side=PositionSide_Short,\r\n                              order_type=OrderType_Market)  # 减持30%\r\n-        \r\n+                             \r\n         on_order_status\r\n         lock_trading(context, symbol)\r\n         \r\n         # 第二层：MACD零轴下强化\r\n"
                },
                {
                    "date": 1745736607142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,265 @@\n+# coding=utf-8\r\n+from __future__ import print_function, absolute_import, unicode_literals\r\n+from gm.api import *\r\n+import math\r\n+import datetime\r\n+\r\n+from QTUtils import *\r\n+\r\n+\r\n+'''\r\n+示例策略仅供参考，不建议直接实盘使用。\r\n+\r\n+日内回转交易是指投资者就同一个标的（如股票）在同一个交易日内各完成多次买进和卖出的行为\r\n+其目的为维持股票数量不变，降低股票成本\r\n+本策略以1分钟MACD为基础，金叉时买入，死叉时卖出，尾盘回转至初始仓位\r\n+'''\r\n+\r\n+\r\n+def init(context):\r\n+    # 设置标的股票\r\n+    context.all_symbols = ['SHSE.600000','SHSE.688165']\r\n+    # 用于判定第一个仓位是否成功开仓\r\n+    context.first = {symbol:0 for symbol in context.all_symbols}\r\n+     # 新增交易状态锁\r\n+    context.trading_blocked = {\r\n+        symbol: {\r\n+            'status': False,          # 交易锁状态\r\n+            'expire_time': None       # 过期时间\r\n+        } for symbol in context.all_symbols\r\n+    }\r\n+\r\n+    # 需要保持的总仓位\r\n+    # context.total = 50000\r\n+    # 日内回转每次交易数量\r\n+    # context.trade_n = 25000\r\n+    # 初始资金比例（总仓位比例）\r\n+    context.total_cash_ratio = 0.25  # 总仓位占账户资金的50%\r\n+    # 每次交易资金比例（日内回转比例）\r\n+    context.trade_cash_ratio = 0.1  # 每次交易账户可用资金的10%\r\n+    # MACD日内分时使用的频率，60s为1分钟bar，300s为5分钟bar\r\n+    context.frequency = '300s'\r\n+    # MACD日内分时回溯数据长度（计算MACD)\r\n+    context.periods_time = 1000\r\n+\r\n+    # 在init中增加择时参数\r\n+    context.risk_ratio = 0.02  # 单笔风险敞口2%\r\n+    context.atr_period = 14    # ATR计算周期\r\n+    context.trend_period = 10   # 趋势判定周期\r\n+    context.volume_ratio = 1.2  # 量能突破阈值\r\n+\r\n+    # 初始化ATR值存储到上下文\r\n+    context.atr_value = None\r\n+\r\n+    # 在策略初始化中设置\r\n+    context.sell_params = {\r\n+    'atr_multiplier': 2.2,      # AR波动过滤系数\r\n+    'resistance_buffer': 0.985, # 压力位检测缓冲\r\n+    'volume_threshold': 2.3     # 放量下跌阈值\r\n+    }\r\n+\r\n+    \r\n+    # 订阅数据日内分时数据\r\n+    subscribe(symbols=context.all_symbols,\r\n+              frequency=context.frequency,\r\n+              count=context.periods_time,\r\n+              fields='symbol,eob,close')\r\n+    # 订阅标的的日线数据，窗口长度设为55（14周期ATR+1）\r\n+    subscribe(symbols=context.all_symbols,\r\n+              frequency='1d',\r\n+              count=55)\r\n+\r\n+    # # 新增10:01定时卖出任务\r\n+    # schedule(schedule_func=daily_sell, \r\n+    #         date_rule='1d', \r\n+    #         time_rule='10:00:00')  # 网页8同花顺定时策略参考\r\n+\r\n+    schedule(schedule_func=algo, date_rule='1d', time_rule='14:55:00')\r\n+\r\n+\r\n+\r\n+# 订阅行情\r\n+def on_bar(context, bars):\r\n+    # 获取账户数据\r\n+    account = context.account()\r\n+    bar = bars[0]\r\n+    symbol = bar['symbol']\r\n+    # 获取当前价格\r\n+    current_price = bar['close']\r\n+    # 获取账户总资金\r\n+    total_cash = account.cash['nav']\r\n+    # 获取账户可用资金\r\n+    available_cash = account.cash['available']\r\n+    # 当日可交易总资金\r\n+    target_value = available_cash * context.total_cash_ratio \r\n+\r\n+\r\n+    # 初始建仓(择时建仓)\r\n+    if context.first[symbol] == 0 and current_price>0 :\r\n+        # 重置交易锁\r\n+        if context.trading_blocked[symbol]['status']:\r\n+            unlock_trading(context, symbol)\r\n+            print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n+\r\n+        if not check_timing_buy_signal(context, symbol):\r\n+            print(f\"{context.now} {symbol} 择时条件未满足，跳过建仓\")\r\n+            return\r\n+        # 表示持仓该股票\r\n+        context.first[symbol] = 1\r\n+        order_value(symbol=symbol, \r\n+                   value=target_value,\r\n+                   side=OrderSide_Buy,\r\n+                   order_type=OrderType_Market,\r\n+                   position_effect=PositionEffect_Open)\r\n+        print(f'{context.now}：{symbol}建底仓，投入资金={target_value:.2f}')\r\n+        return\r\n+\r\n+\r\n+    # # 在交易信号触发前增加锁状态检查\r\n+\r\n+    \r\n+    if context.trading_blocked[symbol]['status'] and \\\r\n+        context.trading_blocked[symbol]['expire_time'] < context.now:\r\n+        # print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n+        return\r\n+\r\n+\r\n+    # 日内交易\r\n+    # 本次（单次）可交易总资金\r\n+    trade_value = available_cash * context.trade_cash_ratio\r\n+    trade_volume = int(trade_value / current_price) if current_price > 0 else 0\r\n+    \r\n+\r\n+    # 修改on_bar中的交易量计算（新增动态交易量）\r\n+    trade_value = min(available_cash * context.trade_cash_ratio,\r\n+                    calculate_dynamic_position(context, symbol) * current_price) \r\n+    # print(f\"[本次交易量] 计划交易量={available_cash * context.trade_cash_ratio:.2f}元 \\\r\n+    #     | 动态交易量={calculate_dynamic_position(context, symbol) * current_price:.2f}元 \\\r\n+    #     | 实际交易量={trade_value:.2f}\")\r\n+\r\n+    close = context.data(symbol=symbol,\r\n+                        frequency=context.frequency,\r\n+                        count=context.periods_time,\r\n+                        fields='close')['close'].values\r\n+    dif, dea, _ = MACD(close)\r\n+    if dif[-2] <= dea[-2] and dif[-1] > dea[-1] and check_trading_permission(context, symbol):  # 日内金叉\r\n+        if trade_volume >0:\r\n+            order_value(symbol=symbol,\r\n+                       value=trade_value,\r\n+                       side=OrderSide_Buy,\r\n+                       order_type=OrderType_Market,\r\n+                       position_effect=PositionEffect_Open)\r\n+    elif dif[-2] >= dea[-2] and dif[-1] < dea[-1] and check_trading_permission(context, symbol):  # 日内死叉\r\n+        if trade_volume >0:\r\n+            order_value(symbol=symbol,\r\n+                       value=trade_value,\r\n+                       side=OrderSide_Sell,\r\n+                       order_type=OrderType_Market,\r\n+                       position_effect=PositionEffect_Close)\r\n+\r\n+\r\n+\r\n+    # 分层卖出执行（减持）\r\n+    if generate_sell_signal(context, symbol):\r\n+        daily_data_close = context.data(symbol=symbol,\r\n+                                frequency='1d',\r\n+                                count=55,\r\n+                                fields='close')['close'].values\r\n+        # 第一层：触发基础信号\r\n+        print(f\"====触发第1层卖出信号====，减持30%\" )\r\n+        order_target_percent(symbol=symbol, percent=0.7,\r\n+                             position_side=PositionSide_Short,\r\n+                             order_type=OrderType_Market)  # 减持30%\r\n+                             \r\n+        on_order_status\r\n+        lock_trading(context, symbol)\r\n+        \r\n+        # 第二层：MACD零轴下强化\r\n+        dif, dea, _ = MACD(daily_data_close)\r\n+        if dif[-1] < 0:  \r\n+            print(f\"====触发第2层卖出信号====，减持20%\" )\r\n+            order_target_percent(symbol=symbol,percent=0.5,\r\n+                        position_side=PositionSide_Short,\r\n+                        order_type=OrderType_Market)  # 减持30%\r\n+            lock_trading(context, symbol)\r\n+            \r\n+        # 第三层：周线级别确认\r\n+        # 获取近一周收盘价（网页9周线处理逻辑）\r\n+        weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n+        daily_ma20 = np.mean(daily_data_close[-20:])\r\n+        if weekly_close < daily_ma20:\r\n+            print(f\"====触发第3层卖出信号====，清仓\" )\r\n+            temp = order_target_percent(symbol=symbol,percent=0.0,\r\n+                        position_side=PositionSide_Short,\r\n+                        order_type=OrderType_Market)  \r\n+            print(temp)\r\n+            lock_trading(context, symbol)\r\n+            # 清仓标记\r\n+            context.first[symbol] = 0\r\n+            eod_position_summary(context);\r\n+        \r\n+\r\n+def on_order_status(context, order):\r\n+    # 标的代码\r\n+    symbol = order['symbol']\r\n+    # 委托价格\r\n+    price = order['price']\r\n+    # 委托数量\r\n+    volume = order['volume']\r\n+    # 查看下单后的委托状态，等于3代表委托全部成交\r\n+    status = order['status']\r\n+    # 买卖方向，1为买入，2为卖出\r\n+    side = order['side']\r\n+    # 开平仓类型，1为开仓，2为平仓\r\n+    effect = order['position_effect']\r\n+    # 委托类型，1为限价委托，2为市价委托\r\n+    order_type = order['order_type']\r\n+    if status == 3:\r\n+        if effect == 1:\r\n+            if side == 1:\r\n+                side_effect = '开多仓'\r\n+            else:\r\n+                side_effect = '开空仓'\r\n+        else:\r\n+            if side == 1:\r\n+                side_effect = '平空仓'\r\n+            else:\r\n+                side_effect = '平多仓'\r\n+        order_type_word = '限价' if order_type == 1 else '市价'\r\n+        print('{}:标的：{}，操作：以{}{}，委托价格：{}，委托数量：{}'.format(\r\n+            context.now, symbol, order_type_word, side_effect, price, volume))\r\n+\r\n+\r\n+def on_backtest_finished(context, indicator):\r\n+    print('*' * 50)\r\n+    print('回测已完成，请通过右上角“回测历史”功能查询详情。')\r\n+\r\n+\r\n+if __name__ == '__main__':\r\n+    '''\r\n+    strategy_id策略ID,由系统生成\r\n+    filename文件名,请与本文件名保持一致\r\n+    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST\r\n+    token绑定计算机的ID,可在系统设置-密钥管理中生成\r\n+    backtest_start_time回测开始时间\r\n+    backtest_end_time回测结束时间\r\n+    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST\r\n+    backtest_initial_cash回测初始资金\r\n+    backtest_commission_ratio回测佣金比例\r\n+    backtest_slippage_ratio回测滑点比例\r\n+    backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n+    '''\r\n+    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=180))[:19]\r\n+    backtest_end_time = str(datetime.datetime.now())[:19]\r\n+    run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n+        filename='main.py',\r\n+        mode=MODE_BACKTEST,\r\n+        token='a39f0567e24a8c8a3d7f0cef38a71d619be4ee96',\r\n+        backtest_start_time=backtest_start_time,\r\n+        backtest_end_time=backtest_end_time,\r\n+        backtest_adjust=ADJUST_PREV,\r\n+        backtest_initial_cash=1000000,\r\n+        backtest_commission_ratio=0.0001,\r\n+        backtest_slippage_ratio=0.0001,\r\n+        backtest_match_mode=1)\r\n+\r\n"
                },
                {
                    "date": 1745736613251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,267 +262,4 @@\n         backtest_commission_ratio=0.0001,\r\n         backtest_slippage_ratio=0.0001,\r\n         backtest_match_mode=1)\r\n \r\n-# coding=utf-8\r\n-from __future__ import print_function, absolute_import, unicode_literals\r\n-from gm.api import *\r\n-import math\r\n-import datetime\r\n-\r\n-from QTUtils import *\r\n-\r\n-\r\n-'''\r\n-示例策略仅供参考，不建议直接实盘使用。\r\n-\r\n-日内回转交易是指投资者就同一个标的（如股票）在同一个交易日内各完成多次买进和卖出的行为\r\n-其目的为维持股票数量不变，降低股票成本\r\n-本策略以1分钟MACD为基础，金叉时买入，死叉时卖出，尾盘回转至初始仓位\r\n-'''\r\n-\r\n-\r\n-def init(context):\r\n-    # 设置标的股票\r\n-    context.all_symbols = ['SHSE.600000','SHSE.688165']\r\n-    # 用于判定第一个仓位是否成功开仓\r\n-    context.first = {symbol:0 for symbol in context.all_symbols}\r\n-     # 新增交易状态锁\r\n-    context.trading_blocked = {\r\n-        symbol: {\r\n-            'status': False,          # 交易锁状态\r\n-            'expire_time': None       # 过期时间\r\n-        } for symbol in context.all_symbols\r\n-    }\r\n-\r\n-    # 需要保持的总仓位\r\n-    # context.total = 50000\r\n-    # 日内回转每次交易数量\r\n-    # context.trade_n = 25000\r\n-    # 初始资金比例（总仓位比例）\r\n-    context.total_cash_ratio = 0.25  # 总仓位占账户资金的50%\r\n-    # 每次交易资金比例（日内回转比例）\r\n-    context.trade_cash_ratio = 0.1  # 每次交易账户可用资金的10%\r\n-    # MACD日内分时使用的频率，60s为1分钟bar，300s为5分钟bar\r\n-    context.frequency = '300s'\r\n-    # MACD日内分时回溯数据长度（计算MACD)\r\n-    context.periods_time = 1000\r\n-\r\n-    # 在init中增加择时参数\r\n-    context.risk_ratio = 0.02  # 单笔风险敞口2%\r\n-    context.atr_period = 14    # ATR计算周期\r\n-    context.trend_period = 10   # 趋势判定周期\r\n-    context.volume_ratio = 1.2  # 量能突破阈值\r\n-\r\n-    # 初始化ATR值存储到上下文\r\n-    context.atr_value = None\r\n-\r\n-    # 在策略初始化中设置\r\n-    context.sell_params = {\r\n-    'atr_multiplier': 2.2,      # AR波动过滤系数\r\n-    'resistance_buffer': 0.985, # 压力位检测缓冲\r\n-    'volume_threshold': 2.3     # 放量下跌阈值\r\n-    }\r\n-\r\n-    \r\n-    # 订阅数据日内分时数据\r\n-    subscribe(symbols=context.all_symbols,\r\n-              frequency=context.frequency,\r\n-              count=context.periods_time,\r\n-              fields='symbol,eob,close')\r\n-    # 订阅标的的日线数据，窗口长度设为55（14周期ATR+1）\r\n-    subscribe(symbols=context.all_symbols,\r\n-              frequency='1d',\r\n-              count=55)\r\n-\r\n-    # # 新增10:01定时卖出任务\r\n-    # schedule(schedule_func=daily_sell, \r\n-    #         date_rule='1d', \r\n-    #         time_rule='10:00:00')  # 网页8同花顺定时策略参考\r\n-\r\n-    schedule(schedule_func=algo, date_rule='1d', time_rule='14:55:00')\r\n-\r\n-\r\n-\r\n-# 订阅行情\r\n-def on_bar(context, bars):\r\n-    # 获取账户数据\r\n-    account = context.account()\r\n-    bar = bars[0]\r\n-    symbol = bar['symbol']\r\n-    # 获取当前价格\r\n-    current_price = bar['close']\r\n-    # 获取账户总资金\r\n-    total_cash = account.cash['nav']\r\n-    # 获取账户可用资金\r\n-    available_cash = account.cash['available']\r\n-    # 当日可交易总资金\r\n-    target_value = available_cash * context.total_cash_ratio \r\n-\r\n-\r\n-    # 初始建仓(择时建仓)\r\n-    if context.first[symbol] == 0 and current_price>0 :\r\n-        # 重置交易锁\r\n-        if context.trading_blocked[symbol]['status']:\r\n-            unlock_trading(context, symbol)\r\n-            print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n-\r\n-        if not check_timing_buy_signal(context, symbol):\r\n-            print(f\"{context.now} {symbol} 择时条件未满足，跳过建仓\")\r\n-            return\r\n-        # 表示持仓该股票\r\n-        context.first[symbol] = 1\r\n-        order_value(symbol=symbol, \r\n-                   value=target_value,\r\n-                   side=OrderSide_Buy,\r\n-                   order_type=OrderType_Market,\r\n-                   position_effect=PositionEffect_Open)\r\n-        print(f'{context.now}：{symbol}建底仓，投入资金={target_value:.2f}')\r\n-        return\r\n-\r\n-\r\n-    # # 在交易信号触发前增加锁状态检查\r\n-    if context.trading_blocked[symbol]['status'] and \\\r\n-        context.trading_blocked[symbol]['expire_time'] < context.now:\r\n-        # print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n-        return\r\n-\r\n-\r\n-    # 日内交易\r\n-    # 本次（单次）可交易总资金\r\n-    trade_value = available_cash * context.trade_cash_ratio\r\n-    trade_volume = int(trade_value / current_price) if current_price > 0 else 0\r\n-    \r\n-\r\n-    # 修改on_bar中的交易量计算（新增动态交易量）\r\n-    trade_value = min(available_cash * context.trade_cash_ratio,\r\n-                    calculate_dynamic_position(context, symbol) * current_price) \r\n-    # print(f\"[本次交易量] 计划交易量={available_cash * context.trade_cash_ratio:.2f}元 \\\r\n-    #     | 动态交易量={calculate_dynamic_position(context, symbol) * current_price:.2f}元 \\\r\n-    #     | 实际交易量={trade_value:.2f}\")\r\n-\r\n-    close = context.data(symbol=symbol,\r\n-                        frequency=context.frequency,\r\n-                        count=context.periods_time,\r\n-                        fields='close')['close'].values\r\n-    dif, dea, _ = MACD(close)\r\n-    if dif[-2] <= dea[-2] and dif[-1] > dea[-1] and check_trading_permission(context, symbol):  # 日内金叉\r\n-        if trade_volume >0:\r\n-            order_value(symbol=symbol,\r\n-                       value=trade_value,\r\n-                       side=OrderSide_Buy,\r\n-                       order_type=OrderType_Market,\r\n-                       position_effect=PositionEffect_Open)\r\n-    elif dif[-2] >= dea[-2] and dif[-1] < dea[-1] and check_trading_permission(context, symbol):  # 日内死叉\r\n-        if trade_volume >0:\r\n-            order_value(symbol=symbol,\r\n-                       value=trade_value,\r\n-                       side=OrderSide_Sell,\r\n-                       order_type=OrderType_Market,\r\n-                       position_effect=PositionEffect_Close)\r\n-\r\n-\r\n-\r\n-    # 分层卖出执行（减持）\r\n-    if generate_sell_signal(context, symbol):\r\n-        daily_data_close = context.data(symbol=symbol,\r\n-                                frequency='1d',\r\n-                                count=55,\r\n-                                fields='close')['close'].values\r\n-        # 第一层：触发基础信号\r\n-        print(f\"====触发第1层卖出信号====，减持30%\" )\r\n-        order_target_percent(symbol=symbol, percent=0.7,\r\n-                             position_side=PositionSide_Short,\r\n-                             order_type=OrderType_Market)  # 减持30%\r\n-                             \r\n-        on_order_status\r\n-        lock_trading(context, symbol)\r\n-        \r\n-        # 第二层：MACD零轴下强化\r\n-        dif, dea, _ = MACD(daily_data_close)\r\n-        if dif[-1] < 0:  \r\n-            print(f\"====触发第2层卖出信号====，减持20%\" )\r\n-            order_target_percent(symbol=symbol,percent=0.5,\r\n-                        position_side=PositionSide_Short,\r\n-                        order_type=OrderType_Market)  # 减持30%\r\n-            lock_trading(context, symbol)\r\n-            \r\n-        # 第三层：周线级别确认\r\n-        # 获取近一周收盘价（网页9周线处理逻辑）\r\n-        weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n-        daily_ma20 = np.mean(daily_data_close[-20:])\r\n-        if weekly_close < daily_ma20:\r\n-            print(f\"====触发第3层卖出信号====，清仓\" )\r\n-            temp = order_target_percent(symbol=symbol,percent=0.0,\r\n-                        position_side=PositionSide_Short,\r\n-                        order_type=OrderType_Market)  \r\n-            print(temp)\r\n-            lock_trading(context, symbol)\r\n-            # 清仓标记\r\n-            context.first[symbol] = 0\r\n-            eod_position_summary(context);\r\n-        \r\n-\r\n-def on_order_status(context, order):\r\n-    # 标的代码\r\n-    symbol = order['symbol']\r\n-    # 委托价格\r\n-    price = order['price']\r\n-    # 委托数量\r\n-    volume = order['volume']\r\n-    # 查看下单后的委托状态，等于3代表委托全部成交\r\n-    status = order['status']\r\n-    # 买卖方向，1为买入，2为卖出\r\n-    side = order['side']\r\n-    # 开平仓类型，1为开仓，2为平仓\r\n-    effect = order['position_effect']\r\n-    # 委托类型，1为限价委托，2为市价委托\r\n-    order_type = order['order_type']\r\n-    if status == 3:\r\n-        if effect == 1:\r\n-            if side == 1:\r\n-                side_effect = '开多仓'\r\n-            else:\r\n-                side_effect = '开空仓'\r\n-        else:\r\n-            if side == 1:\r\n-                side_effect = '平空仓'\r\n-            else:\r\n-                side_effect = '平多仓'\r\n-        order_type_word = '限价' if order_type == 1 else '市价'\r\n-        print('{}:标的：{}，操作：以{}{}，委托价格：{}，委托数量：{}'.format(\r\n-            context.now, symbol, order_type_word, side_effect, price, volume))\r\n-\r\n-\r\n-def on_backtest_finished(context, indicator):\r\n-    print('*' * 50)\r\n-    print('回测已完成，请通过右上角“回测历史”功能查询详情。')\r\n-\r\n-\r\n-if __name__ == '__main__':\r\n-    '''\r\n-    strategy_id策略ID,由系统生成\r\n-    filename文件名,请与本文件名保持一致\r\n-    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST\r\n-    token绑定计算机的ID,可在系统设置-密钥管理中生成\r\n-    backtest_start_time回测开始时间\r\n-    backtest_end_time回测结束时间\r\n-    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST\r\n-    backtest_initial_cash回测初始资金\r\n-    backtest_commission_ratio回测佣金比例\r\n-    backtest_slippage_ratio回测滑点比例\r\n-    backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n-    '''\r\n-    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=180))[:19]\r\n-    backtest_end_time = str(datetime.datetime.now())[:19]\r\n-    run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n-        filename='main.py',\r\n-        mode=MODE_BACKTEST,\r\n-        token='a39f0567e24a8c8a3d7f0cef38a71d619be4ee96',\r\n-        backtest_start_time=backtest_start_time,\r\n-        backtest_end_time=backtest_end_time,\r\n-        backtest_adjust=ADJUST_PREV,\r\n-        backtest_initial_cash=1000000,\r\n-        backtest_commission_ratio=0.0001,\r\n-        backtest_slippage_ratio=0.0001,\r\n-        backtest_match_mode=1)\r\n-\r\n"
                }
            ],
            "date": 1745719720693,
            "name": "Commit-0",
            "content": "# coding=utf-8\r\nfrom __future__ import print_function, absolute_import, unicode_literals\r\nfrom gm.api import *\r\nimport math\r\nimport datetime\r\n\r\nfrom QTUtils import *\r\n\r\n\r\n'''\r\n示例策略仅供参考，不建议直接实盘使用。\r\n\r\n日内回转交易是指投资者就同一个标的（如股票）在同一个交易日内各完成多次买进和卖出的行为\r\n其目的为维持股票数量不变，降低股票成本\r\n本策略以1分钟MACD为基础，金叉时买入，死叉时卖出，尾盘回转至初始仓位\r\n'''\r\n\r\n\r\ndef init(context):\r\n    # 设置标的股票\r\n    context.all_symbols = ['SHSE.600000','SHSE.688165']\r\n    # 用于判定第一个仓位是否成功开仓\r\n    context.first = {symbol:0 for symbol in context.all_symbols}\r\n     # 新增交易状态锁\r\n    context.trading_blocked = {\r\n        symbol: {\r\n            'status': False,          # 交易锁状态\r\n            'expire_time': None       # 过期时间\r\n        } for symbol in context.all_symbols\r\n    }\r\n\r\n    # 需要保持的总仓位\r\n    # context.total = 50000\r\n    # 日内回转每次交易数量\r\n    # context.trade_n = 25000\r\n    # 初始资金比例（总仓位比例）\r\n    context.total_cash_ratio = 0.25  # 总仓位占账户资金的50%\r\n    # 每次交易资金比例（日内回转比例）\r\n    context.trade_cash_ratio = 0.1  # 每次交易账户可用资金的10%\r\n    # MACD日内分时使用的频率，60s为1分钟bar，300s为5分钟bar\r\n    context.frequency = '300s'\r\n    # MACD日内分时回溯数据长度（计算MACD)\r\n    context.periods_time = 1000\r\n\r\n    # 在init中增加择时参数\r\n    context.risk_ratio = 0.02  # 单笔风险敞口2%\r\n    context.atr_period = 14    # ATR计算周期\r\n    context.trend_period = 10   # 趋势判定周期\r\n    context.volume_ratio = 1.2  # 量能突破阈值\r\n\r\n    # 初始化ATR值存储到上下文\r\n    context.atr_value = None\r\n\r\n    # 在策略初始化中设置\r\n    context.sell_params = {\r\n    'atr_multiplier': 2.2,      # AR波动过滤系数\r\n    'resistance_buffer': 0.985, # 压力位检测缓冲\r\n    'volume_threshold': 2.3     # 放量下跌阈值\r\n    }\r\n\r\n    \r\n    # 订阅数据日内分时数据\r\n    subscribe(symbols=context.all_symbols,\r\n              frequency=context.frequency,\r\n              count=context.periods_time,\r\n              fields='symbol,eob,close')\r\n    # 订阅标的的日线数据，窗口长度设为55（14周期ATR+1）\r\n    subscribe(symbols=context.all_symbols,\r\n              frequency='1d',\r\n              count=55)\r\n\r\n    # # 新增10:01定时卖出任务\r\n    # schedule(schedule_func=daily_sell, \r\n    #         date_rule='1d', \r\n    #         time_rule='10:00:00')  # 网页8同花顺定时策略参考\r\n\r\n    schedule(schedule_func=algo, date_rule='1d', time_rule='14:55:00')\r\n\r\n\r\n\r\n# 订阅行情\r\ndef on_bar(context, bars):\r\n    # 获取账户数据\r\n    account = context.account()\r\n    bar = bars[0]\r\n    symbol = bar['symbol']\r\n    # 获取当前价格\r\n    current_price = bar['close']\r\n    # 获取账户总资金\r\n    total_cash = account.cash['nav']\r\n    # 获取账户可用资金\r\n    available_cash = account.cash['available']\r\n    # 当日可交易总资金\r\n    target_value = available_cash * context.total_cash_ratio \r\n\r\n\r\n    # 初始建仓(择时建仓)\r\n    if context.first[symbol] == 0 and current_price>0 :\r\n        # 重置交易锁\r\n        # if context.trading_blocked[symbol]['status']:\r\n        #     unlock_trading(context, symbol)\r\n        #     print(f\"{symbol} ======新建仓触发交易锁解除=======\")\r\n\r\n        if not check_timing_buy_signal(context, symbol):\r\n            print(f\"{context.now} {symbol} 择时条件未满足，跳过建仓\")\r\n            return\r\n        # 表示持仓该股票\r\n        context.first[symbol] = 1\r\n        order_value(symbol=symbol, \r\n                   value=target_value,\r\n                   side=OrderSide_Buy,\r\n                   order_type=OrderType_Market,\r\n                   position_effect=PositionEffect_Open)\r\n        print(f'{context.now}：{symbol}建底仓，投入资金={target_value:.2f}')\r\n        return\r\n\r\n\r\n    # # 在交易信号触发前增加锁状态检查\r\n    # if context.trading_blocked[symbol]['status'] and \\\r\n    #     context.trading_blocked[symbol]['expire_time'] < context.now:\r\n    #     print(f\"{context.now} {symbol} 交易锁生效，跳过日内回转\")\r\n    #     return\r\n\r\n\r\n    # 日内交易\r\n    # 本次（单次）可交易总资金\r\n    trade_value = available_cash * context.trade_cash_ratio\r\n    trade_volume = int(trade_value / current_price) if current_price > 0 else 0\r\n    \r\n\r\n    # 修改on_bar中的交易量计算（新增动态交易量）\r\n    trade_value = min(available_cash * context.trade_cash_ratio,\r\n                    calculate_dynamic_position(context, symbol) * current_price) \r\n    # print(f\"[本次交易量] 计划交易量={available_cash * context.trade_cash_ratio:.2f}元 \\\r\n    #     | 动态交易量={calculate_dynamic_position(context, symbol) * current_price:.2f}元 \\\r\n    #     | 实际交易量={trade_value:.2f}\")\r\n\r\n    close = context.data(symbol=symbol,\r\n                        frequency=context.frequency,\r\n                        count=context.periods_time,\r\n                        fields='close')['close'].values\r\n    dif, dea, _ = MACD(close)\r\n    if dif[-2] <= dea[-2] and dif[-1] > dea[-1] and check_trading_permission(context, symbol):  # 日内金叉\r\n        if trade_volume >0:\r\n            order_value(symbol=symbol,\r\n                       value=trade_value,\r\n                       side=OrderSide_Buy,\r\n                       order_type=OrderType_Market,\r\n                       position_effect=PositionEffect_Open)\r\n    elif dif[-2] >= dea[-2] and dif[-1] < dea[-1] and check_trading_permission(context, symbol):  # 日内死叉\r\n        if trade_volume >0:\r\n            order_value(symbol=symbol,\r\n                       value=trade_value,\r\n                       side=OrderSide_Sell,\r\n                       order_type=OrderType_Market,\r\n                       position_effect=PositionEffect_Close)\r\n\r\n\r\n\r\n    # 分层卖出执行（减持）\r\n    if generate_sell_signal(context, symbol):\r\n        daily_data_close = context.data(symbol=symbol,\r\n                                frequency='1d',\r\n                                count=55,\r\n                                fields='close')['close'].values\r\n        # 第一层：触发基础信号\r\n        print(f\"====触发第1层卖出信号====，减持30%\" )\r\n        order_target_percent(symbol=symbol, percent=0.7,\r\n                             position_side=PositionSide_Short,\r\n                             order_type=OrderType_Market)  # 减持30%\r\n        # lock_trading(context, symbol)\r\n        # 第二层：MACD零轴下强化\r\n        dif, dea, _ = MACD(daily_data_close)\r\n        if dif[-1] < 0:  \r\n            print(f\"====触发第2层卖出信号====，减持20%\" )\r\n            order_target_percent(symbol=symbol,percent=0.5,\r\n                        position_side=PositionSide_Short,\r\n                        order_type=OrderType_Market)  # 减持30%\r\n            # lock_trading(context, symbol)\r\n            \r\n        # 第三层：周线级别确认\r\n        # 获取近一周收盘价（网页9周线处理逻辑）\r\n        weekly_close = np.mean(daily_data_close[-5:]) if len(daily_data_close)>=5 else None\r\n        daily_ma20 = np.mean(context.daily_close[-20:])\r\n        if weekly_close < daily_ma20:\r\n            print(f\"====触发第3层卖出信号====，清仓\" )\r\n            order_target_percent(percent=0.0,\r\n                        position_side=PositionSide_Short,\r\n                        order_type=OrderType_Market)  \r\n            # lock_trading(context, symbol)\r\n            # 清仓标记\r\n            # context.first[symbol] = 0\r\n\r\ndef on_order_status(context, order):\r\n    # 标的代码\r\n    symbol = order['symbol']\r\n    # 委托价格\r\n    price = order['price']\r\n    # 委托数量\r\n    volume = order['volume']\r\n    # 查看下单后的委托状态，等于3代表委托全部成交\r\n    status = order['status']\r\n    # 买卖方向，1为买入，2为卖出\r\n    side = order['side']\r\n    # 开平仓类型，1为开仓，2为平仓\r\n    effect = order['position_effect']\r\n    # 委托类型，1为限价委托，2为市价委托\r\n    order_type = order['order_type']\r\n    if status == 3:\r\n        if effect == 1:\r\n            if side == 1:\r\n                side_effect = '开多仓'\r\n            else:\r\n                side_effect = '开空仓'\r\n        else:\r\n            if side == 1:\r\n                side_effect = '平空仓'\r\n            else:\r\n                side_effect = '平多仓'\r\n        order_type_word = '限价' if order_type == 1 else '市价'\r\n        print('{}:标的：{}，操作：以{}{}，委托价格：{}，委托数量：{}'.format(\r\n            context.now, symbol, order_type_word, side_effect, price, volume))\r\n\r\n\r\ndef on_backtest_finished(context, indicator):\r\n    print('*' * 50)\r\n    print('回测已完成，请通过右上角“回测历史”功能查询详情。')\r\n\r\n\r\nif __name__ == '__main__':\r\n    '''\r\n    strategy_id策略ID,由系统生成\r\n    filename文件名,请与本文件名保持一致\r\n    mode实时模式:MODE_LIVE回测模式:MODE_BACKTEST\r\n    token绑定计算机的ID,可在系统设置-密钥管理中生成\r\n    backtest_start_time回测开始时间\r\n    backtest_end_time回测结束时间\r\n    backtest_adjust股票复权方式不复权:ADJUST_NONE前复权:ADJUST_PREV后复权:ADJUST_POST\r\n    backtest_initial_cash回测初始资金\r\n    backtest_commission_ratio回测佣金比例\r\n    backtest_slippage_ratio回测滑点比例\r\n    backtest_match_mode市价撮合模式，以下一tick/bar开盘价撮合:0，以当前tick/bar收盘价撮合：1\r\n    '''\r\n    backtest_start_time = str(datetime.datetime.now() - datetime.timedelta(days=180))[:19]\r\n    backtest_end_time = str(datetime.datetime.now())[:19]\r\n    run(strategy_id='c4d8ca24-1056-11f0-9686-28c5c8744abd',\r\n        filename='main.py',\r\n        mode=MODE_BACKTEST,\r\n        token='a39f0567e24a8c8a3d7f0cef38a71d619be4ee96',\r\n        backtest_start_time=backtest_start_time,\r\n        backtest_end_time=backtest_end_time,\r\n        backtest_adjust=ADJUST_PREV,\r\n        backtest_initial_cash=1000000,\r\n        backtest_commission_ratio=0.0001,\r\n        backtest_slippage_ratio=0.0001,\r\n        backtest_match_mode=1)\r\n\r\n"
        }
    ]
}